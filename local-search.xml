<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode4.17-23</title>
    <link href="/2023/04/24/Leetcode4.17-4.23/"/>
    <url>/2023/04/24/Leetcode4.17-4.23/</url>
    
    <content type="html"><![CDATA[<h1 id="Leetcode4-17-4-23"><a href="#Leetcode4-17-4-23" class="headerlink" title="Leetcode4.17-4.23"></a>Leetcode4.17-4.23</h1><h2 id="4-17"><a href="#4-17" class="headerlink" title="4.17"></a>4.17</h2><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><h4 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904.水果成篮"></a>904.水果成篮</h4><p>这个题目有点难理解，意思就是找至多包含两种元素的最长子串，返回其长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-attr">public</span>:<br>    int <span class="hljs-title function_">totalFruit</span>(<span class="hljs-params">vector&lt;int&gt;&amp; fruits</span>) &#123;<br>        int i=<span class="hljs-number">0</span>;<br>        int count=<span class="hljs-number">1</span>;<br>        int result=<span class="hljs-number">1</span>;<br>        vector&lt;int&gt; <span class="hljs-title function_">kind</span>(fruits.<span class="hljs-title function_">size</span>(),<span class="hljs-number">0</span>);<br>        kind[fruits[i]]++;<br>        <span class="hljs-keyword">for</span>(int j=<span class="hljs-number">1</span>;j&lt;fruits.<span class="hljs-title function_">size</span>();j++)&#123;<br>            <span class="hljs-keyword">if</span>(kind[fruits[j]]==<span class="hljs-number">0</span>)&#123;<br>                kind[fruits[j]]++;<br>                count++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                kind[fruits[j]]++;<span class="hljs-comment">/*注意1*/</span><br>            &#125;<br>            <br>            <span class="hljs-keyword">while</span>(count&gt;<span class="hljs-number">2</span>)&#123;<br>                kind[fruits[i]]--;<br>                <span class="hljs-keyword">if</span>(!kind[fruits[i]])&#123;<br>                    count--;<br>                &#125;<br>                i++;<br>            &#125;<br>            result=result&gt;(j-i+<span class="hljs-number">1</span>)?<span class="hljs-attr">result</span>:j-i+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>滑动窗口加哈希表</p><p>改了两次bug 终于改对了  第一次是没注意已经放入HASH表中的元素遍历过程中对hash表的影响，即kind[fruits[j]]++;</p><p>还有就是我J从1开始，所以result开始时要设置为1；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">totalFruit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; fruits)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = fruits.<span class="hljs-built_in">size</span>();<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cnt;<br><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> right = <span class="hljs-number">0</span>; right &lt; n; ++right) &#123;<br>            ++cnt[fruits[right]];<br>            <span class="hljs-keyword">while</span> (cnt.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">auto</span> it = cnt.<span class="hljs-built_in">find</span>(fruits[left]);<br>                --it-&gt;second;<br>                <span class="hljs-keyword">if</span> (it-&gt;second == <span class="hljs-number">0</span>) &#123;<br>                    cnt.<span class="hljs-built_in">erase</span>(it);<br>                &#125;<br>                ++left;<br>            &#125;<br>            ans = <span class="hljs-built_in">max</span>(ans, right - left + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br>作者：力扣官方题解<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/fruit-into-baskets/solutions/1893352/shui-guo-cheng-lan-by-leetcode-solution-1uyu/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure><p>我是用了一个向量起到了HASH的作用，官方直接用了相应的类，直接调用方法方便多了（unordered_map）</p><h2 id="4-18"><a href="#4-18" class="headerlink" title="4.18"></a>4.18</h2><h3 id="滑动算法"><a href="#滑动算法" class="headerlink" title="滑动算法"></a>滑动算法</h3><p>今天看一下labuladong的滑动窗口模板，解决一下这道困扰我很久的问题</p><p><code>unordered_map</code> 就是哈希表（字典），相当于 Java 的 <code>HashMap</code>，它的一个方法 <code>count(key)</code> 相当于 Java 的 <code>containsKey(key)</code> 可以判断键 key 是否存在。</p><h4 id="76最小覆盖字串"><a href="#76最小覆盖字串" class="headerlink" title="76最小覆盖字串"></a>76最小覆盖字串</h4><p>模板框架</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 滑动窗口算法框架 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">slidingWindow</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-comment">// 用合适的数据结构记录窗口中的数据</span><br>    unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; window;<br>    <br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (right &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-comment">// c 是将移入窗口的字符</span><br>        <span class="hljs-type">char</span> c = s[right];<br>        winodw.<span class="hljs-built_in">add</span>(c)<br>        <span class="hljs-comment">// 增大窗口</span><br>        right++;<br>        <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>        ...<br><br>        <span class="hljs-comment">/*** debug 输出的位置 ***/</span><br>        <span class="hljs-comment">// 注意在最终的解法代码中不要 print</span><br>        <span class="hljs-comment">// 因为 IO 操作很耗时，可能导致超时</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;window: [%d, %d)\n&quot;</span>, left, right);<br>        <span class="hljs-comment">/********************/</span><br>        <br>        <span class="hljs-comment">// 判断左侧窗口是否要收缩</span><br>        <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; window needs shrink) &#123;<br>            <span class="hljs-comment">// d 是将移出窗口的字符</span><br>            <span class="hljs-type">char</span> d = s[left];<br>            winodw.<span class="hljs-built_in">remove</span>(d)<br>            <span class="hljs-comment">// 缩小窗口</span><br>            left++;<br>            <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>窗口数据的更新</li><li>判断左侧窗口是否收缩的条件</li><li>滑动过程中题目所求的结果确认（最大或者最小）</li></ol><p>（基本都用HASH表作为窗口数据的统计，然后写出判断条件）</p><p>这些点因题而异，但是基本逃不出上面的框架。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">minWindow</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> start=<span class="hljs-number">0</span>,len=INT_MAX;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; need,window;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c : t) need[c]++;<br>        <span class="hljs-keyword">while</span>(right&lt;s.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-type">char</span> c=s[right];<br>            right++;<br>            <span class="hljs-keyword">if</span>(need.<span class="hljs-built_in">count</span>(c))&#123;<br>                window[c]++;<br>                <span class="hljs-keyword">if</span>(window[c]==need[c])&#123;<br>                    count++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(count==need.<span class="hljs-built_in">size</span>())&#123;<br>                <span class="hljs-keyword">if</span>(right-left&lt;len)&#123;<br>                    len=right-left;<br>                    start=left;<br>                &#125;<br>                <span class="hljs-type">char</span> d=s[left];<br>                left++;<br>                <span class="hljs-keyword">if</span>(need.<span class="hljs-built_in">count</span>(d))&#123;<br>                   <br>                    <span class="hljs-keyword">if</span>(need[d]==window[d])&#123;<br>                        count--;<br>                    &#125;<br>                    window[d]--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> len==INT_MAX?<span class="hljs-string">&quot;&quot;</span>:s.<span class="hljs-built_in">substr</span>(start,len);<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-19"><a href="#4-19" class="headerlink" title="4.19"></a>4.19</h2><h3 id="滑动窗口-1"><a href="#滑动窗口-1" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3 无重复字符的最长子串"></a>3 无重复字符的最长子串</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; window;<br>        <span class="hljs-type">int</span> result=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(right&lt;s.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-type">char</span> c=s[right];<br>            right++;<br>            window[c]++;<br>            <span class="hljs-keyword">while</span>(window[c]&gt;<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-type">char</span> d=s[left];<br>                left++;<br>                window[d]--;<br>            &#125;<br>            result=result&gt;right-left?result:right-left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438 找到字符串中所有字母异位词"></a>438 找到字符串中所有字母异位词</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findAnagrams</span><span class="hljs-params">(string s, string p)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; need,window;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:p) need[c]++;<br>        <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        <span class="hljs-keyword">while</span>(right&lt;s.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-type">char</span> c=s[right];<br>            right++;<br>            <span class="hljs-keyword">if</span>(need.<span class="hljs-built_in">count</span>(c))&#123;<br>                window[c]++;<br>                <span class="hljs-keyword">if</span>(need[c]==window[c])&#123;<br>                    count++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(right-left&gt;=p.<span class="hljs-built_in">size</span>())&#123;<br>                <span class="hljs-keyword">if</span>(count==need.<span class="hljs-built_in">size</span>())<br>                    result.<span class="hljs-built_in">push_back</span>(left);<br>                <span class="hljs-type">char</span> d=s[left];<br>                left++;<br>                <span class="hljs-keyword">if</span>(need.<span class="hljs-built_in">count</span>(d))&#123;<br>                    <span class="hljs-keyword">if</span>(window[d]==need[d])<br>                    &#123;<br>                        count--;<br>                    &#125;<br>                    window[d]--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>两道题都套用了昨天的模板，太爽了，第一次做力扣这么舒服</p><h2 id="4-20"><a href="#4-20" class="headerlink" title="4.20"></a>4.20</h2><p>151.反转字符串中的单词</p><p>这道题如果不用api，单纯的用C++的方式原地反转很复杂</p><p>先整个字符串反转，再分别反转字符串里面的单词</p><p>单词间可能不止一个空格，第一个单词和最后一个单词外面可能还有空格，要对字符串进行相应的处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">reverseWords</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-built_in">reverse</span>(s,<span class="hljs-number">0</span>,s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">removespace</span>(s);<br>        <span class="hljs-keyword">while</span>(j&lt;s.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">if</span>(s[j]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                <span class="hljs-built_in">reverse</span>(s,i,j<span class="hljs-number">-1</span>);<br>                i=j+<span class="hljs-number">1</span>;<br>            &#125;<br>            j++;<br>            <span class="hljs-keyword">if</span>(j==s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>                <span class="hljs-built_in">reverse</span>(s,i,j);<br>            &#125;<br>        &#125;<br>       <span class="hljs-keyword">return</span> s;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(string&amp; s,<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span></span>&#123;<br>        <br>        <span class="hljs-keyword">while</span>(start&lt;end)&#123;<br>            <span class="hljs-built_in">swap</span>(s[start],s[end]);<br>            start++;<br>            end--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removespace</span><span class="hljs-params">(string&amp; s)</span></span>&#123;<br>        <span class="hljs-type">int</span> slow=<span class="hljs-number">0</span>,fast=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(s[fast]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            fast++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(fast&lt;s.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">if</span>(fast&gt;<span class="hljs-number">0</span>&amp;&amp;s[fast]==<span class="hljs-string">&#x27; &#x27;</span>&amp;&amp;s[fast<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                fast++;<br>            &#125;<br>            <span class="hljs-keyword">else</span> s[slow++]=s[fast++];<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(slow&gt;<span class="hljs-number">0</span>&amp;&amp;s[slow<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            slow--;<br>        &#125;<br>        s.<span class="hljs-built_in">resize</span>(slow);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-22"><a href="#4-22" class="headerlink" title="4.22"></a>4.22</h2><h3 id="59螺旋矩阵-II"><a href="#59螺旋矩阵-II" class="headerlink" title="59螺旋矩阵 II"></a>59螺旋矩阵 II</h3><p>这个属于二维数组的花式遍历部分，直接上代码，最近忙项目，代码题解这能轻微带过，希望刷题量还能保持</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">generateMatrix</span>(<span class="hljs-type">int</span> n) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">res</span>(n,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n,<span class="hljs-number">0</span>));<br>        <span class="hljs-type">int</span> up=<span class="hljs-number">0</span>,low=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> num=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(num&lt;=n*n)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(up&lt;=low)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=left;j&lt;=right;j++)&#123;<br>                    res[up][j]=num++;<br>                &#125;<br>                up++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(left&lt;=right)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=up;i&lt;=low;i++)&#123;<br>                    res[i][right]=num++;<br>                &#125;<br>                right--;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(up&lt;=low)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=right;j&gt;=left;j--)&#123;<br>                    res[low][j]=num++;<br>                &#125;<br>                low--;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(left&lt;=right)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=low;i&gt;=up;i--)&#123;<br>                    res[i][left]=num++;<br>                &#125;<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode4.10-16</title>
    <link href="/2023/04/24/Leetcode%204.10-4.16/"/>
    <url>/2023/04/24/Leetcode%204.10-4.16/</url>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-4-10-4-16"><a href="#Leetcode-4-10-4-16" class="headerlink" title="Leetcode 4.10-4.16"></a>Leetcode 4.10-4.16</h1><h2 id="4-10"><a href="#4-10" class="headerlink" title="4.10"></a>4.10</h2><p>994 腐烂的橘子</p><p>广度优先搜索，多源</p><p>方法和01矩阵相似，但是不知道为什么出现了bug,代码基本完全一样但是运行报错，找问题找了2个小时还是没有找到问题</p><h2 id="4-11"><a href="#4-11" class="headerlink" title="4.11"></a>4.11</h2><p>70.爬楼梯 </p><p>dp</p><p>这两天开始接触DP相关的题目</p><h2 id="4-12"><a href="#4-12" class="headerlink" title="4.12"></a>4.12</h2><p>198 偷房子</p><p>120 三角形最小路径和</p><h2 id="4-13"><a href="#4-13" class="headerlink" title="4.13"></a>4.13</h2><p>今天开始按照代码随想录的顺序进行刷题，争取6月前完成1刷</p><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><h4 id="69-平方根"><a href="#69-平方根" class="headerlink" title="69.平方根"></a>69.平方根</h4><p>不愧是经典题目，用二分法以为能过，但是没有考虑整数溢出</p><ol><li>mid前面加long long</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right=x;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            <span class="hljs-type">int</span> mid=(right-left)/<span class="hljs-number">2</span>+left;<br>            <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)mid*mid==x)<br>            <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)mid*mid&lt;x)&#123;<br>                left=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)mid*mid&gt;x)&#123;<br>                right=mid<span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>2.没有想到的解法，还是二分做了一个变式，然后用了除法防止溢出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> j = x;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;=j)&#123;<br>            <span class="hljs-type">int</span> mid = i + (j-i)/<span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// upper bound的形式，因为我们要找的ans要是最接近于x的最大的数，利用upper bound</span><br>            <span class="hljs-keyword">if</span> (mid &lt;= x/mid)&#123;<br>                i = mid +<span class="hljs-number">1</span>;<br>                ans = mid; <span class="hljs-comment">// 只要mid &lt;= x/mid，left左边界就会一直向右移动，ans就会一直更新（变大），直到不在满足mid &lt;= x/mid的条件为止，ans就会停止更新，永远停在满足mid&lt;=x/mid条件下面的最后一次更新，即满足ans * ans &lt;= mid的最大值。</span><br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                j = mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><h4 id="367"><a href="#367" class="headerlink" title="367"></a>367</h4><p>双指针法，自己想到的是头尾双指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(nums[left] == val) &#123; <span class="hljs-comment">//left位置的元素需要移除</span><br>                <span class="hljs-comment">//将right位置的元素移到left（覆盖），right位置移除</span><br>                nums[left] = nums[right];<br>                right--;<br>            &#125;<br>            left++;<br>            <span class="hljs-keyword">while</span>(right &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[right] == val) right--;<br></code></pre></td></tr></table></figure><p>题解算法，自己的头尾双指针写的有漏洞，样例不能全过</p><h2 id="4-16"><a href="#4-16" class="headerlink" title="4.16"></a>4.16</h2><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><h4 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844 比较含退格的字符串"></a>844 比较含退格的字符串</h4><p>双指针，对双指针的理解还是不够，这道题在昨天看了评论区的一个方法后，排除了一个越界的bug后成功复现。</p><p>思路</p><p>快指针FAST去遍历，如果没有遇到’#’,将当前的值赋值给SLOW指向的值，然后快慢指针各自向前移动一步；</p><p>如果遇到了’#‘，&#x3D;&#x3D;这里非常巧妙也是关键&#x3D;&#x3D;，将slow–,也就是slow后退一格，那么本来slow指向的值会被后面的新值覆盖，相当于把这个值消除了。还有要注意SLOW&#x3D;0时按上面的逻辑消去会越界的问题，因此要单独讨论。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">backspaceCompare</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> slow1=<span class="hljs-number">0</span>,fast1=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(fast1&lt;s.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">if</span>(s[fast1]!=<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>                s[slow1++]=s[fast1++];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                fast1++;<br>                <span class="hljs-keyword">if</span>(slow1&gt;<span class="hljs-number">0</span>)&#123;<br>                 slow1--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> slow2=<span class="hljs-number">0</span>,fast2=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(fast2&lt;t.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">if</span>(t[fast2]!=<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>                t[slow2++]=t[fast2++];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                fast2++;<br>                <span class="hljs-keyword">if</span>(slow2&gt;<span class="hljs-number">0</span>)&#123;<br>                slow2--;<br>                &#125;                <span class="hljs-comment">/*这里很重要，slow=0时，是没有字符给你消除的，slow--会造成</span><br><span class="hljs-comment">                 越界的问题*/</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(slow2!=slow1)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;slow1;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]==t[i])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>双指针的题碰到过不少，但是有时候还是没有想到很好的解法，先继续往下刷，后续持续训练</p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>这个点当时也是很迷，希望有所进步。</p><p>也可以说是双指针的一种（还是逃不过双指针），但是解法过程像一个窗口的移动。</p><h4 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result=INT32_MAX;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> length=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;nums.<span class="hljs-built_in">size</span>();j++)&#123;<br>            sum+=nums[j];<br>            <span class="hljs-keyword">while</span>(sum&gt;=target)&#123;<br>                length=j-i+<span class="hljs-number">1</span>;<br>                result=result&gt;length?length:result;<br>                sum=sum-nums[i];<br>                i++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result==INT32_MAX?<span class="hljs-number">0</span>:result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS-API-2</title>
    <link href="/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/"/>
    <url>/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</url>
    
    <content type="html"><![CDATA[<h1 id="JS学习笔记7"><a href="#JS学习笔记7" class="headerlink" title="JS学习笔记7"></a>JS学习笔记7</h1><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>事件是编程语言中的术语，它是用来描述程序的行为或状态的，<strong>一旦行为或状态发生改变，便立即调用一个函数。</strong></p><p>例如：用户使用【鼠标点击】网页中的一个按钮、用户使用【鼠标拖拽】网页中的一张图片。</p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">元素对象.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;事件类型&#x27;</span>,要执行的函数)<br></code></pre></td></tr></table></figure><ol><li>事件源（DOM对象）</li><li>事件类型</li><li>回调函数</li></ol><p>老版本的  事件源.on事件&#x3D;function(){}</p><p>区别： on方式会被覆盖，addEventListener方式可绑定多次，拥有事件更多特性</p><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><p>与鼠标操作相关的事件</p><p>1.鼠标经过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseenter&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;轻轻的我来了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>2.鼠标离开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListenr</span>(<span class="hljs-string">&#x27;mouseleave&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;轻轻的我走了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><p>keydown   键盘按下触发<br>keyup   键盘抬起触发</p><h4 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h4><p>focus  获得焦点</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;focus&#x27;</span>,<span class="hljs-built_in">function</span>()&#123;&#125;)<br></code></pre></td></tr></table></figure><p>blur 失去焦点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="文本框输入事件"><a href="#文本框输入事件" class="headerlink" title="文本框输入事件"></a>文本框输入事件</h4><p>input  </p><h3 id="x3D-x3D-事件对象-x3D-x3D"><a href="#x3D-x3D-事件对象-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;事件对象&#x3D;&#x3D;"></a>&#x3D;&#x3D;事件对象&#x3D;&#x3D;</h3><p>这个对象里有事件触发时的相关信息</p><ul><li>可以判断用户按下哪个键</li><li>可以判断鼠标点击了哪个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-comment">// console.log(11)</span><br>      <span class="hljs-comment">// console.log(e.key)</span><br>      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;Enter&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我按下了回车键&#x27;</span>)<br>      &#125;<br>    &#125;)<br>回调函数的第一个参数就是事件对象<br></code></pre></td></tr></table></figure><p>trim方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">str=<span class="hljs-string">&#x27;  i  &#x27;</span><br>str.<span class="hljs-title function_">trim</span>();<br>去除字符串两侧的空格<br></code></pre></td></tr></table></figure><h3 id="x3D-x3D-环境对象-x3D-x3D"><a href="#x3D-x3D-环境对象-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;环境对象&#x3D;&#x3D;"></a>&#x3D;&#x3D;<strong>环境对象</strong>&#x3D;&#x3D;</h3><p>函数内部特殊的变量<strong>this</strong>，代表当前函数运行时所处的环境</p><p>弄清楚<strong>this</strong>的指向，可以让代码更简洁</p><p>普通函数里this指向window</p><ul><li>函数的调用方式不同,this指代的对象也不同</li><li>【谁调用，this就是谁】是判断this指向的初略原则</li></ul><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>如果将函数A作为参数传递给函数B时，我们称函数A为回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是回调函数...&#x27;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 调用定时器</span><br>  <span class="hljs-built_in">setInterval</span>(fn, <span class="hljs-number">1000</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS-API-1</title>
    <link href="/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06(API)/"/>
    <url>/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06(API)/</url>
    
    <content type="html"><![CDATA[<h1 id="JS学习笔记6-API-DOM"><a href="#JS学习笔记6-API-DOM" class="headerlink" title="JS学习笔记6(API-DOM)"></a>JS学习笔记6(API-DOM)</h1><p>前面基础部分笔记较简略，这里开始做细致的记录</p><p>&#x3D;&#x3D;（DOM-获取元素）&#x3D;&#x3D;</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><br>array.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;d&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>不会报错，因为地址没有修改，改变的是地址指向的内容。</p><p>声明变量优先给const,后续需要修改再改为let</p><p>&#x3D;&#x3D;建议数组和对象使用const声明&#x3D;&#x3D;</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>ECMAScript 简称 ES 它提供了一套语言标准规范，如变量、数据类型、表达式、语句、函数等语法规则都是由 ECMAScript 规定的。浏览器将 ECMAScript 大部分的规范加以实现，并且在此基础上又扩展一些实用的功能，这些被扩展出来的内容我们称为 Web APIs。</p><p><img src="/image/js-6-1.png" alt="6-1"></p><ul><li>使用JS去操作HTML和浏览器</li><li>分类：DOM(文档对象模型)和BOM(浏览器对象模型)</li></ul><p>DOM（Document Object Model）是将整个 HTML 文档的每一个标签元素视为一个对象，这个对象下包含了许多的属性和方法，通过操作这些属性或者调用这些方法实现对 HTML 的动态更新，为实现网页特效以及用户交互提供技术支撑。</p><p>简言之 DOM 是用来动态修改 HTML 的，其目的是开发网页特效及用户交互。</p><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><ul><li>将HTML文档以树状结构直观的表现出来，我们称之为文档树或DOM树</li><li>作用：直观的体现了标签与标签之间的关系</li></ul><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><p>浏览器根据HTML标签生成的JS对象</p><ul><li>文档树的每一个节点都是一个DOM对象</li></ul><p>核心思想：把网页内容当作对象处理</p><p><strong>&#x3D;&#x3D;document是DOM里最大的对象&#x3D;&#x3D;</strong></p><p><code>document</code> 是 JavaScript 内置的专门用于 DOM 的对象，该对象包含了若干的属性和方法，<code>document</code> 是学习 DOM 的核心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-comment">// document 是内置的对象</span><br>  <span class="hljs-comment">// console.log(typeof document);</span><br><br>  <span class="hljs-comment">// 1. 通过 document 获取根节点</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>); <span class="hljs-comment">// 对应 html 标签</span><br><br>  <span class="hljs-comment">// 2. 通过 document 节取 body 节点</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>); <span class="hljs-comment">// 对应 body 标签</span><br><br>  <span class="hljs-comment">// 3. 通过 document.write 方法向网页输出内容</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h2><p>（根据CSS选择器的方式）</p><h3 id="选中匹配的第一个元素"><a href="#选中匹配的第一个元素" class="headerlink" title="选中匹配的第一个元素"></a>选中匹配的第一个元素</h3><p>querySelsecor() 参数包含一个或多个有效的字符串</p><p>返回选择器匹配的第一个元素，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">const</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>)  <span class="hljs-comment">// 获取第一个p元素</span><br>  <span class="hljs-comment">/*引号里面是选择器*/</span><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="选择匹配的元素集合"><a href="#选择匹配的元素集合" class="headerlink" title="选择匹配的元素集合"></a>选择匹配的元素集合</h3><p>querySelectAll()  </p><p>返回选择器匹配的对象集合，伪数组（有长度有索引，没有pop,push等方法）</p><ul><li>通过for遍历得到每一个对象</li></ul><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p><img src="/image/js-6-2.png"></p><h2 id="操作对象"><a href="#操作对象" class="headerlink" title="操作对象"></a>操作对象</h2><h3 id="操作标签内容"><a href="#操作标签内容" class="headerlink" title="操作标签内容"></a>操作标签内容</h3><ol><li><p>对象.innerText</p><p>只识别文本，不解析标签</p></li><li><p>对象.innerHtml</p><p> 能识别文本，解析标签</p></li></ol><h3 id="操作常用属性"><a href="#操作常用属性" class="headerlink" title="操作常用属性"></a>操作常用属性</h3><p>直接能过属性名修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-comment">// 1. 获取 img 对应的 DOM 元素</span><br>  <span class="hljs-keyword">const</span> pic = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.pic&#x27;</span>)<br><span class="hljs-comment">// 2. 修改属性</span><br>  pic.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;./images/lion.webp&#x27;</span><br>  pic.<span class="hljs-property">width</span>=<span class="hljs-string">&#x27;400px&#x27;</span><br>  pic.<span class="hljs-property">alt</span> = <span class="hljs-string">&#x27;图片不见了...&#x27;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="操作元素样式属性"><a href="#操作元素样式属性" class="headerlink" title="操作元素样式属性"></a>操作元素样式属性</h3><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p>应用【修改样式】，通过修改行内样式 <code>style</code> 属性，实现对样式的动态修改。</p><p>通过元素节点获得的 <code>style</code> 属性本身的数据类型也是对象，如 <code>box.style.color</code>、<code>box.style.width</code> 分别用来获取元素节点 CSS 样式的 <code>color</code> 和 <code>width</code> 的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;练习 - 修改样式&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;div class=&quot;box&quot;&gt;随便一些文本内容&lt;/div&gt;<br>  &lt;script&gt;<br>    // 获取 DOM 节点<br>    const box = document.querySelector(&#x27;.intro&#x27;)<br>    box.style.color = &#x27;red&#x27;<br>    box.style.width = &#x27;300px&#x27;<br>    // css 属性的 - 连接符与 JavaScript 的 减运算符<br>    // 冲突，所以要改成驼峰法<br>    box.style.backgroundColor = &#x27;pink&#x27;<br>  &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>(注意属性名有-，用小驼峰命名)<br></code></pre></td></tr></table></figure><p>修改样式比较少的情况下有优势</p><p>生成的是行内样式表，权重比较高</p><h4 id="className"><a href="#className" class="headerlink" title="className"></a>className</h4><p>如果修改的样式比较多，直接通过style属性修改比较繁琐，我们可以通过借助于css类名的形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>  &lt;title&gt;练习 - 修改样式&lt;/title&gt;<br>    &lt;style&gt;<br>        .pink &#123;<br>            background: pink;<br>            color: hotpink;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;div class=&quot;box&quot;&gt;随便一些文本内容&lt;/div&gt;<br>  &lt;script&gt;<br>    // 获取 DOM 节点<br>    const box = document.querySelector(&#x27;.box&#x27;)<br>    box.className = &#x27;box pink&#x27;<br>  &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>1.由于class是关键字, 所以使用className去代替</p><p> 2.className是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名’box pink’</p></blockquote><h4 id="x3D-x3D-classList-x3D-x3D"><a href="#x3D-x3D-classList-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;classList&#x3D;&#x3D;"></a>&#x3D;&#x3D;classList&#x3D;&#x3D;</h4><p>为了解决className 容易覆盖以前的类名，我们可以通过classList方式追加和删除类名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        div &#123;<br>            width: 200px;<br>            height: 200px;<br>            background-color: pink;<br>        &#125;<br><br>        .active &#123;<br>            width: 300px;<br>            height: 300px;<br>            background-color: hotpink;<br>            margin-left: 100px;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>    &lt;div class=&quot;one&quot;&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>        // 1.获取元素<br>        // let box = document.querySelector(&#x27;css选择器&#x27;)<br>        let box = document.querySelector(&#x27;div&#x27;)<br>        // add是个方法 添加  追加   类名不加点，并且是字符串<br>        // box.classList.add(&#x27;active&#x27;)<br>        // remove() 移除 类<br>        // box.classList.remove(&#x27;one&#x27;)<br>        // 切换类   原来有这个类就删除，没有就加上<br>        box.classList.toggle(&#x27;one&#x27;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="操作表单元素属性"><a href="#操作表单元素属性" class="headerlink" title="操作表单元素属性"></a>操作表单元素属性</h3><p>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p><p>正常的有属性有取值的跟其他的标签属性没有任何区别</p><p> (得到表单的值用value)</p><p>获取:DOM对象.属性名</p><p>设置:DOM对象.属性名&#x3D; 新值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br><br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;input type=&quot;text&quot; value=&quot;请输入&quot;&gt;<br>    &lt;button disabled&gt;按钮&lt;/button&gt;<br>    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;agree&quot;&gt;<br>    &lt;script&gt;<br>        // 1. 获取元素<br>        let input = document.querySelector(&#x27;input&#x27;)<br>        // 2. 取值或者设置值  得到input里面的值可以用 value<br>        // console.log(input.value)<br>        input.value = &#x27;小米手机&#x27;<br>        input.type = &#x27;password&#x27;<br><br>        // 2. 启用按钮<br>        let btn = document.querySelector(&#x27;button&#x27;)<br>        // disabled 不可用   =  false  这样可以让按钮启用<br>        btn.disabled = false<br>        // 3. 勾选复选框<br>        let checkbox = document.querySelector(&#x27;.agree&#x27;)<br>        checkbox.checked = true<br>    checkbox.checked=&#x27;true&#x27; (也能选中，有默认的隐式转换，除了空字符串是false)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>自定义属性：</p><p>在html5中推出来了专门的data-自定义属性  </p><p>在标签上一律以data-开头</p><p>在DOM对象上一律以dataset对象方式获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br><br>&lt;/head&gt;<br><br>&lt;body&gt;<br>   &lt;div data-id=&quot;1&quot;&gt; 自定义属性 &lt;/div&gt;<br>    &lt;script&gt;<br>        // 1. 获取元素<br>        let div = document.querySelector(&#x27;div&#x27;)<br>        // 2. 获取自定义属性值<br>         console.log(div.dataset.id)<br>      <br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="定时器-间歇函数"><a href="#定时器-间歇函数" class="headerlink" title="定时器-间歇函数"></a>定时器-间歇函数</h2><p>  <code>setInterval</code> 是 JavaScript 中内置的函数，它的作用是间隔固定的时间自动重复执行另一个函数，也叫定时器函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(函数，间隔时间);<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-number">1000</span>);单位是ms<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>  <br>&#125;<br><span class="hljs-built_in">setInterval</span>(fn,<span class="hljs-number">1000</span>)  （函数名不需要加括号）<br></code></pre></td></tr></table></figure><p>在某些情况下需要关闭</p><p>let n&#x3D;setInterval</p><p>clearInterval(n)</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在努力了</title>
    <link href="/2023/04/21/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    <url>/2023/04/21/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="先扯点有的没的"><a href="#先扯点有的没的" class="headerlink" title="先扯点有的没的"></a>先扯点有的没的</h2><p>三月份面临考研和就业的抉择，在纠结之后最终还是选择了就业。<br>在过去三年，计算机带给我的更多是痛苦大于喜悦，搞学术写论文目前并没有让我找到兴趣点和获得收获感，因此我如果随大流考研升学，在我看来是一种逃避，也是一种负担；过去的摆烂导致了平庸的GPA和惨淡的竞赛经历，更别提学术论文，因此考研考梦校也是一种幻想，复试那不是必无。</p><p>所以还是选择了就业。三月份投了一堆实习，一个面试也没有，确实，前端基础都没学完，力扣一年没碰了，c艹都忘得差不多了，有面试就怪了。加上整体就业环境的影响，互联网遍地黄金的时代过去了，’’前端已死’’传言盛行，难啊。不过学前端至少让我得到一些获得感，无所谓哥们继续学，<strong>种一棵树，最好的时间是十年前，其次是现在</strong>，希望秋招顺利。</p><p>​2023.4.13</p><p>拿到了一个小厂的实习，但是说好了六月份去，由于小厂口头承诺没有邮件，中间这段时间不知道会不会毁约，近期还是在寻找机会；JS进度这周差不多可以结束，开始接触框架，得尝试做一些前后端结合的项目了；恒生的项目还没有进入开发的周期，但是开发压力很大，我还没有做过前后端完整结合的项目，所以五月前必须接触前后端结合，后端用Java的项目了；算法这边还是必须得有保证，力扣5月前希望可以破百。由于前期的摆烂，整个计算机大方面的综合能力还是太弱，恒生这边的项目尽全力去做，争取有秋招的终面offer；前端技术栈和算法能力综合的去训练，如果六月去了实习，实习内容的学习和秋招必须兼顾，倘若去不了，必须暑期找一下开源项目同时全力争对秋招。所做的一切，最终还是为了秋招，大厂不抱希望，目标是秋招能进一家中厂，有点想去恒生，做的东西我挺感兴趣。</p><p>​2023.4.21</p>]]></content>
    
    
    <categories>
      
      <category>一点心路历程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自述</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础语法4</title>
    <link href="/2023/04/21/JS%E7%AC%94%E8%AE%B04/"/>
    <url>/2023/04/21/JS%E7%AC%94%E8%AE%B04/</url>
    
    <content type="html"><![CDATA[<h1 id="JS笔记4"><a href="#JS笔记4" class="headerlink" title="JS笔记4"></a>JS笔记4</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="声明和调用"><a href="#声明和调用" class="headerlink" title="声明和调用"></a>声明和调用</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值<span class="hljs-number">5</span>个部分<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">形参</span>)&#123;<br>  <br>  <span class="hljs-keyword">return</span> xx<br>&#125;<br></code></pre></td></tr></table></figure><p>命名规范：</p><ol><li>和变量命名基本一致</li><li>小驼峰</li><li>前缀尽量为动词</li></ol><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。</p><p>声明（定义）一个功能为打招呼的函数</p><ul><li>传入数据列表</li><li>声明这个函数需要传入几个数据</li><li>多个数据用逗号隔开</li></ul><p>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</p><p>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</p><p>形参可以理解为是在这个函数内声明的变量（比如 num1 &#x3D; 10）实参可以理解为是给这个变量赋值</p><p>开发中尽量保持形参和实参个数一致</p><p>（如果声明了形参但是实际调用时没有给实参，参数为undefined，可以改进一下</p><p>function name(x&#x3D;0,y&#x3D;0）{</p><p>}</p><p>)</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？要想获得函数内部逻辑的执行结果，需要通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p><ol><li>在函数体中使用return 关键字能将内部的执行结果交给函数外部使用</li><li>函数内部只能出现1 次 return，并且 return 下一行代码不会再被执行，所以return 后面的数据不要换行写</li><li>return会立即结束当前函数</li><li>函数可以没有return，这种情况默认返回值为 undefined</li></ol><p>要返回多个值</p><p>可以直接返回一个数组</p><p>一些注意点</p><ol><li><p>函数名相同，后面定义的覆盖前面的</p></li><li><p>参数不匹配： </p><ol><li>实参多于形参，多的实参剩下，不参与运算(函数内部有一个arguements)</li><li>形参过多，会自动填上undefined;</li></ol><p>​</p></li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p><p>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突</p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p><p>处于全局作用域内的变量，称为全局变量</p><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</p><p>处于局部作用域内的变量称为局部变量</p><blockquote><p>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</p><p>但是有一种情况，函数内部的形参可以看做是局部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>  num=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<span class="hljs-comment">//这种情况把num当成了全局变量</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); 报错因为形参可以看作局部变量，不能在函数外部使用<br></code></pre></td></tr></table></figure></blockquote><h4 id="x3D-x3D-变量访问原则-x3D-x3D"><a href="#x3D-x3D-变量访问原则-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;变量访问原则&#x3D;&#x3D;"></a>&#x3D;&#x3D;变量访问原则&#x3D;&#x3D;</h4><p>能够访问到的情况下先局部，访问不到时逐层向上寻找。</p><h3 id="x3D-x3D-匿名函数-x3D-x3D"><a href="#x3D-x3D-匿名函数-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;匿名函数&#x3D;&#x3D;"></a>&#x3D;&#x3D;匿名函数&#x3D;&#x3D;</h3><p>function(){}</p><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>具名函数的调用可以写到任何位置，</p><p>函数表达式只能先声明后使用</p><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>（&#x3D;&#x3D;必须加分号&#x3D;&#x3D;）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; xxx  &#125;)();<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;xxxx&#125;());<br></code></pre></td></tr></table></figure><p>可以用来防止变量污染</p><h3 id="逻辑中断"><a href="#逻辑中断" class="headerlink" title="逻辑中断"></a>逻辑中断</h3><p>短路：只存在于&amp;&amp;和||中</p><p>&amp;&amp; 一假则假，后面的语句不执行，都真，以后面的真为准</p><p>|| 一真则真，后面的语句不执行</p><p>​     都假，以后面的假为准</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;pink&#x27;</span>))    <span class="hljs-literal">true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>))        <span class="hljs-literal">false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>))         <span class="hljs-literal">false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">90</span>))         <span class="hljs-literal">true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">-1</span>))         <span class="hljs-literal">true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>))   <span class="hljs-literal">false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>))      <span class="hljs-literal">false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>))    <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>if ()里面会有隐式转换</p><p>null&amp;&amp;1 值是0            null短路，后面不执行，值为null  作为表达式的值不会有转换，进行逻辑判断时有隐式转换</p><p>undefined&amp;&amp;1值是undefined</p><hr><p><img src="/image/js-2.png"></p><p>null+1&#x3D;1</p><p>undefined+1&#x3D;NaN+1&#x3D;NaN</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础语法5</title>
    <link href="/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
    <url>/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
    
    <content type="html"><![CDATA[<h1 id="JS学习笔记5"><a href="#JS学习笔记5" class="headerlink" title="JS学习笔记5"></a>JS学习笔记5</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote><p>对象是 JavaScript 数据类型的一种，之前已经学习了数值类型、字符串类型、布尔类型、undefined。对象数据类型可以被理解成是一种数据集合。它由属性和方法两部分构成。</p></blockquote><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明对象类型变量，使用一对花括号</span><br><span class="hljs-comment">// user 便是一个对象了，目前它是一个空对象</span><br><span class="hljs-keyword">let</span> user = &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p><ol><li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li><li>多个属性之间使用英文 <code>,</code> 分隔</li><li>属性就是依附在对象上的变量</li><li>属性名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-comment">// 通过对象描述一个人的数据信息</span><br>  <span class="hljs-comment">// person 是一个对象，它包含了一个属性 name</span><br>  <span class="hljs-comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span><br>  <span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-comment">// 描述人的姓名</span><br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-comment">// 描述人的年龄</span><br>    <span class="hljs-attr">stature</span>: <span class="hljs-number">185</span>, <span class="hljs-comment">// 描述人的身高</span><br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-comment">// 描述人的性别</span><br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>声明对象，并添加了若干属性后，可以使用 <code>.</code> 或 <code>[]</code> 获得对象中属性对应的值(访问)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person[<span class="hljs-string">&#x27;stature&#x27;</span>]) <span class="hljs-comment">// 结果为 185</span><br>因为有的属性名加了引号，以字符串的形式<span class="hljs-string">&#x27;name-product&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="增加和修改"><a href="#增加和修改" class="headerlink" title="增加和修改"></a>增加和修改</h4><p>对象.属性&#x3D;新值</p><p>对象.新属性&#x3D;值</p><p>（没有就是新增，有就是修改）</p><p>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>delete 对象.属性</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。</p><ol><li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li><li>多个属性之间使用英文 <code>,</code> 分隔</li><li>方法是依附在对象中的函数</li><li>方法名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj=&#123;<br>  uname=<span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">sum</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <br>&#125;，<br>  type=<span class="hljs-string">&#x27;&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>方法也可以根据属性类型的方式进行添加</p><h3 id="x3D-x3D-遍历对象-x3D-x3D"><a href="#x3D-x3D-遍历对象-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;遍历对象&#x3D;&#x3D;"></a>&#x3D;&#x3D;遍历对象&#x3D;&#x3D;</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[key])<br>&#125;<br><span class="hljs-keyword">typeof</span> key 返回值是字符串型<br>所以 obj[key]相当于用了第二种访问属性的方式<br></code></pre></td></tr></table></figure><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>console,document,Math</p><h3 id="简单和复杂数据类型"><a href="#简单和复杂数据类型" class="headerlink" title="简单和复杂数据类型"></a>简单和复杂数据类型</h3><p>简单数据类型放栈里，复杂数据类型内容在堆里。定义的变量是放在栈里指向复杂数据类型内容的指针</p><p><img src="/image/js-5-1.png"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础语法3</title>
    <link href="/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <url>/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="JS学习笔记3"><a href="#JS学习笔记3" class="headerlink" title="JS学习笔记3"></a>JS学习笔记3</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组在 JavaScript 中并不是新的数据类型，它属于对象类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-comment">// 1. 语法，使用 [] 来定义一个空数组</span><br>  <span class="hljs-comment">// 定义一个空数组，然后赋值给变量 classes</span><br>  <span class="hljs-comment">// let classes = [];</span><br><br>  <span class="hljs-comment">// 2. 定义非空数组</span><br>  <span class="hljs-keyword">let</span> classes = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小刚&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小丽&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>]<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>undefined+数字是NaN</p><p>数组做为数据的集合，它的单元值可以是任意数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-comment">// 6. 数组单值类型可以是任意数据类型</span><br><br>  <span class="hljs-comment">// a) 数组单元值的类型为字符类型</span><br>  <span class="hljs-keyword">let</span> list = [<span class="hljs-string">&#x27;HTML&#x27;</span>, <span class="hljs-string">&#x27;CSS&#x27;</span>, <span class="hljs-string">&#x27;JavaScript&#x27;</span>]<br>  <span class="hljs-comment">// b) 数组单元值的类型为数值类型</span><br>  <span class="hljs-keyword">let</span> scores = [<span class="hljs-number">78</span>, <span class="hljs-number">84</span>, <span class="hljs-number">70</span>, <span class="hljs-number">62</span>, <span class="hljs-number">75</span>]<br>  <span class="hljs-comment">// c) 混合多种类型</span><br>  <span class="hljs-keyword">let</span> mixin = [<span class="hljs-literal">true</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="操作数组的方法（增删改查）"><a href="#操作数组的方法（增删改查）" class="headerlink" title="操作数组的方法（增删改查）"></a>操作数组的方法（增删改查）</h3><p>数组做为对象数据类型，不但有 <code>length</code> 属性可以使用，还提供了许多方法：</p><ol><li>push 动态向数组的尾部添加一个单元或多个元素，返回新的长度</li><li>unshift 动态向数组头部添加一个单元,返回新的长度</li><li>pop 删除最后一个单元</li><li>shift 删除第一个单元</li><li>splice 动态删除任意单元</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-comment">// 定义一个数组</span><br>  <span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-string">&#x27;javascript&#x27;</span>]<br><br>  <span class="hljs-comment">// 1. push 动态向数组的尾部添加一个单元</span><br>  arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Nodejs&#x27;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br>  arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Vue&#x27;</span>)<br><br>  <span class="hljs-comment">// 2. unshit 动态向数组头部添加一个单元</span><br>  arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&#x27;VS Code&#x27;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br><br>  <span class="hljs-comment">// 3. splice 动态删除任意单元</span><br>  arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 从索引值为2的位置开始删除1个单元,如果没有第二个参数，则删除后面所有的元素</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br><br>  <span class="hljs-comment">// 4. pop 删除最后一个单元</span><br>  arr.<span class="hljs-title function_">pop</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br><br>  <span class="hljs-comment">// 5. shift 删除第一个单元</span><br>  arr.<span class="hljs-title function_">shift</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">sort</span>()<br>里面可以写函数<br>array.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>  <span class="hljs-keyword">return</span> b-a;<br>&#125;)<br>返回增序<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础语法2</title>
    <link href="/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="JS学习笔记2"><a href="#JS学习笔记2" class="headerlink" title="JS学习笔记2"></a>JS学习笔记2</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>一元运算符（自增++，自减–，注意前置和后置的小区别，和别的语言相同）</p><p>算术运算符 </p><p>赋值运算符</p><p>比较运算符（与别的语言略有不同）</p><p>逻辑运算符</p><p>运算符优先级</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">注意一个点；<br>数字与字符串比较时，字符串会转换成数字字符,如果字符串为非数字，这个字符串会转换成<span class="hljs-literal">NaN</span>;比较结果均为<span class="hljs-literal">FALSE</span><br><br>如 (<span class="hljs-number">9</span>&lt;<span class="hljs-string">&#x27;10&#x27;</span>) <span class="hljs-literal">true</span><br>   (<span class="hljs-number">9</span>&lt;<span class="hljs-string">&#x27;asd&#x27;</span>) <span class="hljs-literal">false</span><br>   (<span class="hljs-number">9</span>&gt;<span class="hljs-string">&#x27;asd&#x27;</span>) <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><h3 id="顺序语句"><a href="#顺序语句" class="headerlink" title="顺序语句"></a>顺序语句</h3><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><p>分支语句包含：</p><h4 id="if分支语句（重点）"><a href="#if分支语句（重点）" class="headerlink" title="if分支语句（重点）"></a>if分支语句（重点）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// 单分支语句</span><br>    <span class="hljs-comment">// if (false) &#123;</span><br>    <span class="hljs-comment">//   console.log(&#x27;执行语句&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// if (3 &gt; 5) &#123;</span><br>    <span class="hljs-comment">//   console.log(&#x27;执行语句&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// if (2 === &#x27;2&#x27;) &#123;</span><br>    <span class="hljs-comment">//   console.log(&#x27;执行语句&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">//  1. 除了0 所有的数字都为真</span><br>    <span class="hljs-comment">//   if (0) &#123;</span><br>    <span class="hljs-comment">//     console.log(&#x27;执行语句&#x27;)</span><br>    <span class="hljs-comment">//   &#125;</span><br>    <span class="hljs-comment">// 2.除了 &#x27;&#x27; 所有的字符串都为真 true</span><br>    <span class="hljs-comment">// if (&#x27;pink老师&#x27;) &#123;</span><br>    <span class="hljs-comment">//   console.log(&#x27;执行语句&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// if (&#x27;&#x27;) &#123;</span><br>    <span class="hljs-comment">//   console.log(&#x27;执行语句&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// // if (&#x27;&#x27;) console.log(&#x27;执行语句&#x27;)</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">条件 ? 表达式1 ： 表达式2<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 三元运算符（三元表达式）</span><br><span class="hljs-comment">// 1. 语法格式</span><br><span class="hljs-comment">// 条件 ? 表达式1 : 表达式2 </span><br><br><span class="hljs-comment">// 2. 执行过程 </span><br><span class="hljs-comment">// 2.1 如果条件为真，则执行表达式1</span><br><span class="hljs-comment">// 2.2 如果条件为假，则执行表达式2</span><br><br><span class="hljs-comment">// 3. 验证</span><br><span class="hljs-comment">// 5 &gt; 3 ? &#x27;真的&#x27; : &#x27;假的&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span> &lt; <span class="hljs-number">3</span> ? <span class="hljs-string">&#x27;真的&#x27;</span> : <span class="hljs-string">&#x27;假的&#x27;</span>)<br><br><span class="hljs-comment">// let age = 18 </span><br><span class="hljs-comment">// age = age + 1</span><br><span class="hljs-comment">//  age++</span><br><br><span class="hljs-comment">// 1. 用户输入 </span><br><span class="hljs-keyword">let</span> num = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请您输入一个数字:&#x27;</span>)<br><span class="hljs-comment">// 2. 判断输出- 小于10才补0</span><br><span class="hljs-comment">// num = num &lt; 10 ? 0 + num : num</span><br>num = num &gt;= <span class="hljs-number">10</span> ? num : <span class="hljs-number">0</span> + num<br><span class="hljs-title function_">alert</span>(num)<br></code></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>使用场景： 适合于有多个条件的时候，也属于分支语句，大部分情况下和 if多分支语句 功能相同</p><p>注意：</p><ol><li><p>switch case语句一般用于等值判断, if适合于区间判断</p></li><li><p>switchcase一般需要配合break关键字使用 没有break会造成case穿透</p></li><li><p>if 多分支语句开发要比switch更重要，使用也更多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">x</span>:<br>    语句（可以多个语句，无需用一个大括号包围）<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">y</span>:<br>    语句<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>    语句<br>  &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>        <span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>)&#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">`number<span class="hljs-subst">$&#123;i&#125;</span>&lt;br&gt;`</span>);<br>            i++;<br>        &#125;<br>&lt;<span class="hljs-regexp">/script&gt; /</span><span class="hljs-regexp">/&lt;br&gt;标签放在反引号里面，参考document.write()的用法</span><br></code></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">注意<span class="hljs-keyword">for</span>循环语句的执行顺序<br> <span class="hljs-keyword">for</span>(①; ②; ③)&#123;<br><br> ④<br><br>&#125;<br><br>一、执行①<br><br>二、执行②，如果判断结果为<span class="hljs-literal">true</span>,则执行三，如果判断结果为<span class="hljs-literal">false</span>,则执行五<br><br>三、执行 ④<br><br>四、执行③，然后重复执行二<br><br>五、退出循环<br>对于<span class="hljs-keyword">for</span>循环内部的<span class="hljs-keyword">continue</span>,只跳过大括号内此轮循环语句的执行，不影响<span class="hljs-number">3</span>，即不影响i++;与<span class="hljs-keyword">while</span>不同，<span class="hljs-keyword">while</span>要注意i++的语句先后<br></code></pre></td></tr></table></figure><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><p>1.while(true) 来构造“无限”循环，需要使用break退出循环。（常用）</p><p>2.for(;;) 也可以来构造“无限”循环，同样需要使用break退出循环。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础语法1</title>
    <link href="/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2023/04/21/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="JS学习笔记1"><a href="#JS学习笔记1" class="headerlink" title="JS学习笔记1"></a>JS学习笔记1</h1><h1 id="（基础语法部分笔记简略）"><a href="#（基础语法部分笔记简略）" class="headerlink" title="（基础语法部分笔记简略）"></a>（基础语法部分笔记简略）</h1><h2 id="js输入输出语法"><a href="#js输入输出语法" class="headerlink" title="js输入输出语法"></a>js输入输出语法</h2><h3 id="输出语法"><a href="#输出语法" class="headerlink" title="输出语法"></a>输出语法</h3><ol><li><p>document.write() 页面中打印</p><p>参数解析：</p><p>（1）.expN：可以是一个或者多个参数，如果是多个参数，那么按照顺序写入文档。(如果写入多个参数的话，这些参数会自动换行显示)</p><p>  (2)这里的参数可以是变量，也可以是函数体、函数自执行体，数字等等，也可以进行一些简单的运算</p><p>  (3)参数支持标签属性，写入的时候会按照html进行解析，但是需要用字符串的形式(常用的标签属性就是换行符 <br> &#x3D;&#x3D;Javascript 中只能在 HTML 输出流中使用 document.write，在文档已加载后使用它（比如在函数中），会覆盖整个文档。&#x3D;&#x3D;</p></li><li><p>console.log()  控制台中打印</p><p><strong>参数：</strong>var：变量，可以是数组类型，对象类型，或者字符串类型等。</p></li><li><p>alert() 弹窗</p></li></ol><h3 id="输入语法"><a href="#输入语法" class="headerlink" title="输入语法"></a>输入语法</h3><p>prompt()</p><h2 id="代码执行顺序"><a href="#代码执行顺序" class="headerlink" title="代码执行顺序"></a>代码执行顺序</h2><ol><li>html文档流顺序</li><li>alert()和prompt( )会跳过页面渲染先被执行</li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>let+变量名</p><p> var 已经淘汰</p><p>let不允许重复声明　</p><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p><ol><li>只能是字母、数字、下划线、&#x3D;&#x3D;$&#x3D;&#x3D;，且不能能数字开头</li><li>字母区分大小写，如 Age 和 age 是不同的变量</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li><li>尽量保证变量具有一定的语义，见字知义</li></ol><p>小驼峰命名，第一个单词首字母小写，后面单词首字母大写。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>通过 typeof 关键字检测数据类型</p><p>基本数据类型+引用数据类型（object）</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>数字</p><p>字符串</p><p>布尔类型</p><p>undefined(声明变量未赋值)</p><p>null（这个变量将来是对象但是还没有值）</p><hr><p>模板字符串</p><ul><li>拼接字符串和变量</li><li>语法  <ul><li>反引号包含数据</li><li>${变量名}</li></ul></li></ul><p>隐式转换</p><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><p><img src="/image/js-1.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> num = <span class="hljs-number">13</span> <span class="hljs-comment">// 数值</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> num2 = <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-comment">// 字符串</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 结果为 132</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 然后 + 将两个字符串拼接到了一起</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num + num2)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 结果为 11</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 然后数值 13 减去 数值 2</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num - num2)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> a = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入一个数字&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> b = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请再输入一个数字&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(a + b);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显示转换</p><p>Number() </p><p>通过 <code>Number</code> 显示转换成数值类型，当转换失败时结果为 <code>NaN</code>（Not a Number）即不是一个数字</p><p>parseInt()</p><p>parseFloat()</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS笔记2</title>
    <link href="/2023/04/20/css%E7%AC%94%E8%AE%B02/"/>
    <url>/2023/04/20/css%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="css笔记2"><a href="#css笔记2" class="headerlink" title="css笔记2"></a>css笔记2</h1><h2 id="1-Emmet语法"><a href="#1-Emmet语法" class="headerlink" title="1.Emmet语法"></a>1.Emmet语法</h2><p>提高Html&#x2F;css编写速度</p><h3 id="快速生成html语法"><a href="#快速生成html语法" class="headerlink" title="快速生成html语法"></a>快速生成html语法</h3><ol><li><p>标签名+Tab直接生成标签</p></li><li><p>生成多个相同标签  标签名<code>*</code>n  div*3    </p></li><li><p>父子级别关系的标签，用&gt; , ul&gt;li</p></li><li><p>兄弟级别的标签，用+， div+p</p></li><li><p>点+类名，生成带类名的标签；#+id名，生成带id名的标签</p></li><li><p>.demo$*5,生成五个按序排列的div</p></li><li><p>div{内容} ，生成的标签里面显示内容</p></li></ol><hr><h3 id="快速生成css语法"><a href="#快速生成css语法" class="headerlink" title="快速生成css语法"></a>快速生成css语法</h3><ol><li>用属性的缩写可以直接生成属性</li></ol><hr><h2 id="2-快速格式化代码"><a href="#2-快速格式化代码" class="headerlink" title="2.快速格式化代码"></a>2.快速格式化代码</h2><p>vs里面通过右键找到即可</p><p>也可以修改vs的设置，再保存时自动格式化代码</p><hr><h2 id="3-复合选择器（接上一个笔记）"><a href="#3-复合选择器（接上一个笔记）" class="headerlink" title="3.复合选择器（接上一个笔记）"></a>3.复合选择器（接上一个笔记）</h2><p>由两个或多个基本选择器组合形成的</p><h3 id="x3D-x3D-后代选择器-x3D-x3D"><a href="#x3D-x3D-后代选择器-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;后代选择器&#x3D;&#x3D;"></a>&#x3D;&#x3D;后代选择器&#x3D;&#x3D;</h3><p>​后代选择器又称为包含选择器，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">元素1 元素2 </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  内容</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用空格隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是元素2（&#x3D;&#x3D;元素1和元素2不能是同级的，元素1和元素2不能选择同一个标签&#x3D;&#x3D;）</li><li>元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li><li>元素1 和 元素2 可以是任意基础选择器</li></ul><hr><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><p>子选择器只能选择作为某元素的&#x3D;&#x3D;最近&#x3D;&#x3D;一级子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav</span>&gt;<span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用 大于号 隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是元素2</li><li>元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器</li></ul><hr><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>并集选择器可以选择多组标签，同时为他们定义相同的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">p</span> &#123;<br>  样式声明<br>&#125;<br><span class="hljs-selector-tag">div</span>和<span class="hljs-selector-tag">p</span>都改了同一个样式<br></code></pre></td></tr></table></figure><p>任何形式的选择器都可以作为并集选择器的一部分</p><p>并集选择器喜欢竖着写，最后一个选择器不需要加“,”</p><hr><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p> 伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">用冒号表示   :<span class="hljs-built_in">link</span><br></code></pre></td></tr></table></figure><h4 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>没有点击过的(访问过的)链接<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>点击过的(访问过的)链接<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>鼠标经过的那个链接<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>鼠标正在按下还没有弹起鼠标的那个链接<br><br></code></pre></td></tr></table></figure><p>为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active</p><hr><h4 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title="focus伪类选择器"></a>focus伪类选择器</h4><p>用于选取获得焦点的表单元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">一般&lt;<span class="hljs-selector-tag">input</span>&gt;才能获取焦点(光标)<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-x3D-x3D-css元素显示模式-x3D-x3D"><a href="#4-x3D-x3D-css元素显示模式-x3D-x3D" class="headerlink" title="4.&#x3D;&#x3D;css元素显示模式&#x3D;&#x3D;"></a>4.&#x3D;&#x3D;css元素显示模式&#x3D;&#x3D;</h2><p>元素显示模式就是元素（标签）以什么方式显示。</p><p>html元素一般分为块元素和行内元素两种类型。</p><hr><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><p>常见的块元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;特点&#x3D;&#x3D;</p><ul><li>比较霸道，自己独占一行。</li></ul><ul><li>高度，宽度、外边距以及内边距都可以控制。</li><li>宽度默认是容器（父级宽度）的100%。如div没有指定，宽度与上级body一样</li><li>是一个容器及盒子，里面可以放行内或者块级元素。</li></ul><p>&#x3D;&#x3D;文字类的元素内不能使用块级元素&#x3D;&#x3D;</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">p,</span>h等标签内不能放块元素<br></code></pre></td></tr></table></figure><hr><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>常见行内元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span> 最常见</span></p><p>特点:</p><ol><li>相邻行内元素在一行上，一行可以显示多个。</li><li>高、宽直接设置是无效的。(<img>同时具有行内元素，行内块和块级元素的特性，是一种特殊的可替换元素，可以设置，此外还包括表单元素)</li><li>默认宽度就是它本身内容的宽度。</li><li>行内元素只能容纳文本或其他行内元素。</li></ol><p>链接里面不能再放链接</p><pre><code class="hljs">特殊情况链接 &lt;a&gt; 里面可以放块级元素，但是给 &lt;a&gt; 转换一下块级模式最安全</code></pre><hr><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p><code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code></p><ul><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。</li><li>一行可以显示多个（行内元素特点）。</li><li>默认宽度就是它本身内容的宽度（行内元素特点）。</li><li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li></ul><hr><h3 id="显示模式的转换"><a href="#显示模式的转换" class="headerlink" title="显示模式的转换"></a>显示模式的转换</h3><p>一个模式的元素需要另一种模式的特性</p><p>比如增加链接<a>的触发范围</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>:block      行内元素转换成块级元素<br>a &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-attribute">display</span>: inline  块级元素转换成行内元素<br>display: inline-block  转换成行内块元素<br></code></pre></td></tr></table></figure><hr><h2 id="5-snipaste"><a href="#5-snipaste" class="headerlink" title="5.snipaste"></a>5.snipaste</h2><ol><li>F1可以截图，并对图片操作</li><li>F3再桌面置顶显示</li><li>点击图片，ALT可以取色</li><li>按下ESC取消图片显示</li></ol><hr><h2 id="6-单行文字垂直居中"><a href="#6-单行文字垂直居中" class="headerlink" title="6.单行文字垂直居中"></a>6.单行文字垂直居中</h2><p>让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</p><p><img src="/image/1.PNG" alt="1"></p><p><img src="/image/2.PNG" alt="2"></p><p>​      行高的上空隙和下空隙把文字挤到中间了，</p><p>​如果行高小于盒子高度,文字会偏上，</p><p>​如果行高大于盒子高度,则文字偏下。</p><p>​(文字这个整体靠近盒子左上角)</p><hr><h2 id="7-CSS的背景"><a href="#7-CSS的背景" class="headerlink" title="7.CSS的背景"></a>7.CSS的背景</h2><h3 id="1-背景颜色"><a href="#1-背景颜色" class="headerlink" title="1.背景颜色"></a>1.背景颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">transparent</span>(默认)|color;<br></code></pre></td></tr></table></figure><h3 id="2-背景图片"><a href="#2-背景图片" class="headerlink" title="2.背景图片"></a>2.背景图片</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">常见于logo或者装饰性小图片和超大背景图，便于控制位置<br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">none</span>(默认)|url;<br>例： <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/glory.jpg</span>)<br></code></pre></td></tr></table></figure><p>背景图片在背景颜色上面</p><p>背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径<strong>不要加引号</strong>。</p><h3 id="3-背景平铺"><a href="#3-背景平铺" class="headerlink" title="3.背景平铺"></a>3.背景平铺</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-repeat</span>:<span class="hljs-built_in">repeat</span>(默认) |no-repeat|repeat-x|repect-y<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>默认，横向纵向平铺</td></tr><tr><td>no-repeat</td><td>无平铺</td></tr><tr><td>repeat-x</td><td>横向平铺</td></tr><tr><td>repeat-y</td><td>纵向平铺</td></tr></tbody></table><h3 id="4-背景图片位置"><a href="#4-背景图片位置" class="headerlink" title="4.背景图片位置"></a>4.背景图片位置</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-position</span>:x y;<br><span class="hljs-number">1</span>.参数是方位名词 center <span class="hljs-attribute">top</span><br>  两个值都是方位名词，互换顺序没有影响<br>  如果只写了一个参数，如<span class="hljs-attribute">right</span>,另一个默认是居中<br><br><span class="hljs-number">2</span>.参数是精确单位 <span class="hljs-number">50px</span> <span class="hljs-number">100px</span>; x轴一定在前面，互换顺序有影响<br>  只有一个参数，那个参数为x轴的数据，另一个默认居中<br><br><span class="hljs-number">3</span>.参数是混合单位 center <span class="hljs-number">20px</span>,参数有顺序<br></code></pre></td></tr></table></figure><h3 id="5-背景图像固定（背景附着）"><a href="#5-背景图像固定（背景附着）" class="headerlink" title="5.背景图像固定（背景附着）"></a>5.背景图像固定（背景附着）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-attachment</span> 属性设置背景图像是否固定或者随着页面的其余部分滚动(拉动页面图片也会动)。<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像随页面滚动（默认）</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h3 id="6-x3D-x3D-背景复合写法-x3D-x3D"><a href="#6-x3D-x3D-背景复合写法-x3D-x3D" class="headerlink" title="6.&#x3D;&#x3D;背景复合写法&#x3D;&#x3D;"></a>6.&#x3D;&#x3D;背景复合写法&#x3D;&#x3D;</h3><p>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p><p>约定的顺序</p><h3 id="7-背景颜色半透明"><a href="#7-背景颜色半透明" class="headerlink" title="7.背景颜色半透明"></a>7.背景颜色半透明</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.3</span>);<br>最后一个参数是alpha透明度，<span class="hljs-number">0</span>-<span class="hljs-number">1</span>之间<br></code></pre></td></tr></table></figure><p>背景色半透明，盒子内容不受任何影响</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS笔记1</title>
    <link href="/2023/04/20/CSS1/"/>
    <url>/2023/04/20/CSS1/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-CSS语法规范和代码风格"><a href="#1-CSS语法规范和代码风格" class="headerlink" title="1.CSS语法规范和代码风格"></a>1.CSS语法规范和代码风格</h2><p>语法规范</p><ul><li>选择器（用于指定CSS样式的HTML标签）</li><li>一条或多条声明(属性和属性值以键值对的形式出现)</li></ul><hr><p>代码风格</p><ul><li><p>小写</p></li><li><p>空格规范</p><ul><li>冒号后保留一个空格</li><li>选择器和{直接留一个空格</li></ul></li><li><p>展开书写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">color</span>: pink;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="2-css选择器"><a href="#2-css选择器" class="headerlink" title="2.css选择器"></a>2.css选择器</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>根据不同需求选择不同标签</p><hr><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><ol><li><p>标签</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">标签选择器</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    属性：属性值</span><br><span class="hljs-template-variable">    ...</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">属性：属性值...</code></pre><p>}</p></li><li><p>类</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs applescript">.类名 &#123;<br>    属性<span class="hljs-number">1</span>: 属性值<span class="hljs-number">1</span>;  <br>    ...<br>&#125; <br>结构需要用<span class="hljs-built_in">class</span>属性来调用  <span class="hljs-built_in">class</span>  类的意思<br> &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;类名&quot;</span>&gt; 变红色 &lt;/<span class="hljs-keyword">div</span>&gt;<br><span class="hljs-number">1.</span>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。<br><span class="hljs-number">2.</span>类选择器在 HTML 中以 <span class="hljs-built_in">class</span> 属性表示，在 CSS 中，类选择器以一个点“.”号显示。<br><span class="hljs-number">3.</span>类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。<br><span class="hljs-number">4.</span>可以理解为给这个标签起了一个名字，来表示。<br><span class="hljs-number">5.</span>长名称或词组可以使用中横线来为选择器命名。<br><span class="hljs-number">6.</span>不要使用纯数字、中文等命名，尽量使用英文字母来表示。<br><span class="hljs-number">7.</span>命名要有意义，尽量使别人一眼就知道这个类名的目的。<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs applescript">我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签.<br>简单理解就是一个标签有多个名字. <br><br>多类名的具体使用：<br>    <span class="hljs-number">1.</span> &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;red font20&quot;</span>&gt;亚瑟&lt;/<span class="hljs-keyword">div</span>&gt;<br>注意：<br>    <span class="hljs-number">1.</span>在标签<span class="hljs-built_in">class</span> 属性中写 多个类名<br>    <span class="hljs-number">2.</span>多个类名中间必须用空格分开<br>    <span class="hljs-number">3.</span>这个标签就可以分别具有这些类名的样式<br>   <br>多类名开发中使用场景<br>(<span class="hljs-number">1</span>) 可以把一些标签元素相同的样式(共同的部分)放到一个类里面.<br>(<span class="hljs-number">2</span>) 这些标签都可以调用这个公共的类,然后再调用自己独有的类.<br>(<span class="hljs-number">3</span>) 从而节省CSS代码,统一修改也非常方便<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">案例<br>用 <br><span class="hljs-attribute">background-color</span><br><span class="hljs-attribute">width</span><br><span class="hljs-attribute">height</span> 三个属性修改<span class="hljs-selector-tag">div</span><br></code></pre></td></tr></table></figure><p>​</p></li><li><p>ID</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">html元素以<span class="hljs-built_in">id</span>属性设置选择器，css以<span class="hljs-comment">#+选择器定义</span><br><br></code></pre></td></tr></table></figure><p>id与类选择器区别</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span>只能使用一次，好比身份证号，唯一<br>类可以有好多标签同属一个类<br></code></pre></td></tr></table></figure><p>​</p></li><li><p>通配符</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>选取页面中所有元素</p></li></ol><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><hr><h2 id="3-css字体"><a href="#3-css字体" class="headerlink" title="3.css字体"></a>3.css字体</h2><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>,Arial;<br>设置多个字体时，第一个系统找不到后用第二个，以此类推<br></code></pre></td></tr></table></figure><hr><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>单位px，Google默认<span class="hljs-number">16px</span>;<br>直接对<span class="hljs-selector-tag">body</span>标签设置字体大小时，里面的h标签需要单独设置<br></code></pre></td></tr></table></figure><hr><h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-weight</span>: <span class="hljs-built_in">normal</span>(<span class="hljs-number">400</span>),<span class="hljs-comment">/*默认--&gt;*/</span>,<span class="hljs-built_in">bold</span>(<span class="hljs-number">700</span>),<span class="hljs-built_in">number</span>(<span class="hljs-number">100</span>-<span class="hljs-number">900</span>);<br><span class="hljs-attribute">font-weight</span>:<span class="hljs-number">700</span>; 等价于bold;<br></code></pre></td></tr></table></figure><p>让加粗标签不变粗</p><hr><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-style</span>: italic;倾斜<br></code></pre></td></tr></table></figure><hr><h3 id="字体复合属性"><a href="#字体复合属性" class="headerlink" title="字体复合属性"></a>字体复合属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">字体属性简写的方式,节约代码<br><span class="hljs-attribute">font</span>: font-style font-weight font-size/line-height font-family；<br>不能随意更改顺序，必须有size,family属性<br></code></pre></td></tr></table></figure><h2 id="4-css文本属性"><a href="#4-css文本属性" class="headerlink" title="4.css文本属性"></a>4.css文本属性</h2><h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: red; 预定义的颜色值<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0000</span>; <span class="hljs-number">16</span>进制表示 最常用<br><span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">文本内容水平对齐<br><span class="hljs-attribute">text-align</span> <span class="hljs-attribute">left</span>(默认),center,<span class="hljs-attribute">right</span>;<br>本质是让盒子里的文字水平对齐<br></code></pre></td></tr></table></figure><hr><h3 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-decoration</span>: none;<br><span class="hljs-attribute">text-decoration</span>: underline;<span class="hljs-comment">/*下划线*/</span><br><span class="hljs-attribute">text-decoration</span>: overline;<span class="hljs-comment">/*上划线 */</span><br><span class="hljs-attribute">text-decoration</span>: line-through;<span class="hljs-comment">/*删除线*/</span><br><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;删除链接下划线&#x3D;&#x3D;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br><span class="hljs-attribute">text-indent</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>; 缩进当前元素两个文字大小的距离<br>   <span class="hljs-selector-tag">em</span>相对单位，<span class="hljs-attribute">font-size</span> 一个文字的大小<br>&#125;<br><br><br></code></pre></td></tr></table></figure><hr><h3 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">line-height</span>:<br>&#125;<br>上间距+文本高度+下间距=行间距<br></code></pre></td></tr></table></figure><hr><h2 id="5-css引入方式"><a href="#5-css引入方式" class="headerlink" title="5.css引入方式"></a>5.css引入方式</h2><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">把所有css代码放到&lt;style&gt;&lt;/style&gt;标签中，在<span class="hljs-selector-tag">html</span>页面内部<br></code></pre></td></tr></table></figure><h3 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">直接在标签内部写上style属性，如<br>&lt;<span class="hljs-keyword">div</span> style=<span class="hljs-string">&quot;color: red; font-size: 12px&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br><br></code></pre></td></tr></table></figure><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">开发中使用最多<br>单独写到CSS文件中，再引入HTML文件中<br>1.新建.CSS后缀文件(文件里只有样式没有标签)<br>2.&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;文件路径&quot;</span>&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="6-chrome调试工具"><a href="#6-chrome调试工具" class="headerlink" title="6.chrome调试工具"></a>6.chrome调试工具</h2><ol><li>F12打开</li><li>ctrl+滚轮放大缩小2 ctrl+0 复原浏览器大小</li></ol>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS笔记7</title>
    <link href="/2023/04/20/css%E7%AC%94%E8%AE%B07/"/>
    <url>/2023/04/20/css%E7%AC%94%E8%AE%B07/</url>
    
    <content type="html"><![CDATA[<h1 id="css笔记7"><a href="#css笔记7" class="headerlink" title="css笔记7"></a>css笔记7</h1><h2 id="1-精灵图"><a href="#1-精灵图" class="headerlink" title="1.精灵图"></a>1.精灵图</h2><h3 id="为什么使用精灵图（目的）："><a href="#为什么使用精灵图（目的）：" class="headerlink" title="为什么使用精灵图（目的）："></a><strong>为什么使用精灵图（目的）：</strong></h3><p>​<strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。</p><h3 id="核心原理："><a href="#核心原理：" class="headerlink" title="核心原理："></a><strong>核心原理</strong>：</h3><p>​将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p><h3 id="精灵图的使用"><a href="#精灵图的使用" class="headerlink" title="精灵图的使用"></a>精灵图的使用</h3><p>使用精灵图核心：</p><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li><li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li><li>移动背景图片位置， 此时可以使用 background-position 。</li><li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li><li>&#x3D;&#x3D;因为一般情况下都是往上往左移动，所以数值是负值。&#x3D;&#x3D;</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li></ol><hr><h2 id="2-字体图标"><a href="#2-字体图标" class="headerlink" title="2.字体图标"></a>2.字体图标</h2><h3 id="字体图标的产生"><a href="#字体图标的产生" class="headerlink" title="字体图标的产生"></a>字体图标的产生</h3><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。</p><p>精灵图是有诸多优点的，但是缺点很明显。</p><p>1.图片文件还是比较大的。</p><p>2.图片本身放大和缩小会失真。</p><p>3.一旦图片制作完毕想要更换非常复杂。</p><p>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p><p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>轻量级：一旦字体加载了，很快就行显示出来</li><li>灵活性：本质是文字，方便修改</li><li>兼容性：几乎支持所有的浏览器</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>字体图标下载（icomoon)</p><p>放到根目录中，在css中引入字体文件（字体声明）</p><p>html标签内添加小图标</p><p>给标签指定字体</p><h2 id="3-css三角"><a href="#3-css三角" class="headerlink" title="3.css三角"></a>3.css三角</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>; <br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">border</span>: <span class="hljs-number">50px</span> solid transparent;<br><span class="hljs-attribute">border-color</span>: red green blue black;<br><span class="hljs-attribute">line-height</span>:<span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol><h2 id="4-用户界面样式"><a href="#4-用户界面样式" class="headerlink" title="4.用户界面样式"></a>4.用户界面样式</h2><h3 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">cursor</span>: pointer<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>defaut</td><td>默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>十字架</td></tr><tr><td>text</td><td>文字光标</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><h3 id="轮廓线"><a href="#轮廓线" class="headerlink" title="轮廓线"></a>轮廓线</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">outline</span>:<span class="hljs-number">0</span> 去掉表单蓝色边框<br></code></pre></td></tr></table></figure><h3 id="防止拖拽文本域"><a href="#防止拖拽文本域" class="headerlink" title="防止拖拽文本域"></a>防止拖拽文本域</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">resize</span>: none;<br></code></pre></td></tr></table></figure><h2 id="5-vertical-align属性"><a href="#5-vertical-align属性" class="headerlink" title="5.vertical-align属性"></a>5.vertical-align属性</h2><p>用于设置一个元素的垂直对齐方式，只能用于行内元素或行内块元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">vertical-align</span> : baseline | top | middle | bottom <br></code></pre></td></tr></table></figure><p>解决图片底部默认空白缝隙问题</p><p>主要解决方法有两种：</p><p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）</p><p>2.把图片转换为块级元素  <strong>display: block</strong>; </p><h2 id="6-文字溢出省略号显示"><a href="#6-文字溢出省略号显示" class="headerlink" title="6.文字溢出省略号显示"></a>6.文字溢出省略号显示</h2><h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*1. 先强制一行内显示文本*/</span><br>  <span class="hljs-attribute">white-space</span>: nowrap;  （ 默认 <span class="hljs-attribute">normal</span> 自动换行）<br>  <br> <span class="hljs-comment">/*2. 超出的部分隐藏*/</span><br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <br> <span class="hljs-comment">/*3. 文字用省略号替代超出的部分*/</span><br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br></code></pre></td></tr></table></figure><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*1. 超出的部分隐藏 */</span><br><span class="hljs-attribute">overflow</span>: hidden;<br><br><span class="hljs-comment">/*2. 文字用省略号替代超出的部分 */</span><br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br><br><span class="hljs-comment">/* 3. 弹性伸缩盒子模型显示 */</span><br><span class="hljs-attribute">display</span>: -webkit-box;<br><br><span class="hljs-comment">/* 4. 限制在一个块元素显示的文本的行数 */</span><br>-webkit-line-clamp: <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span><br>-webkit-box-orient: vertical;<br><br></code></pre></td></tr></table></figure><h2 id="7-布局技巧"><a href="#7-布局技巧" class="headerlink" title="7.布局技巧"></a>7.布局技巧</h2><h3 id="margin-负值的应用"><a href="#margin-负值的应用" class="headerlink" title="margin 负值的应用"></a>margin 负值的应用</h3><p>1.两个有边框的盒子挨在一起会导致边框加粗，可以巧妙使用margin</p><p>使一个盒子的边框压住另一个盒子的边框。</p><p>2.在有一边被压住的情况下，鼠标经过时出现边框的变化，鼠标经过某个盒子的时候，给盒子加相对定位或者提高层级。</p><h3 id="文字围绕浮动元素"><a href="#文字围绕浮动元素" class="headerlink" title="文字围绕浮动元素"></a>文字围绕浮动元素</h3><p>巧妙运用浮动元素不会压住文字的特性</p><h3 id="行内块巧妙运用"><a href="#行内块巧妙运用" class="headerlink" title="行内块巧妙运用"></a>行内块巧妙运用</h3><p>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS笔记6</title>
    <link href="/2023/04/20/css%E7%AC%94%E8%AE%B06/"/>
    <url>/2023/04/20/css%E7%AC%94%E8%AE%B06/</url>
    
    <content type="html"><![CDATA[<h1 id="css笔记6"><a href="#css笔记6" class="headerlink" title="css笔记6"></a>css笔记6</h1><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="1-为什么需要定位"><a href="#1-为什么需要定位" class="headerlink" title="1.为什么需要定位"></a>1.为什么需要定位</h3><p>定位可以让盒子自由的在某个盒子内移动位置或者固定屏幕中的某个位置，并且可以压住某个盒子。</p><h3 id="2-定位组成"><a href="#2-定位组成" class="headerlink" title="2.定位组成"></a>2.定位组成</h3><p>定位&#x3D;定位模式+边偏移</p><p>定位模式用于指定一个元素在文档中的定位模式。边偏移则决定了该元素的最终位置。</p><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><h3 id="3-静态定位"><a href="#3-静态定位" class="headerlink" title="3.静态定位"></a>3.静态定位</h3><p>元素的默认定位方式，无定位的意思</p><p>按照标准流的方式摆放位置</p><h3 id="4-相对定位"><a href="#4-相对定位" class="headerlink" title="4.相对定位"></a>4.相对定位</h3><ol><li><p>元素移动时是相对元素原来的位置来说的</p></li><li><p>元素在标准流的位置中依然占用，后面的盒子仍以原来的方式对待它，不脱标</p><p>position: relative;</p><p>（会显示在浮动和标准流上面）</p></li></ol><h3 id="5-绝对定位"><a href="#5-绝对定位" class="headerlink" title="5.绝对定位"></a>5.绝对定位</h3><p>​     position: absolute;</p><ol><li>绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的</li><li>如果没有父元素或者父元素没有定位，以浏览器为准进行对齐</li><li>如果父元素有定位，以最近一级有定位的父元素为基准</li><li>绝对定位不占有原先位置，脱标</li></ol><h3 id="6-子绝父相"><a href="#6-子绝父相" class="headerlink" title="6.子绝父相"></a>6.子绝父相</h3><p>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p><p>②父盒子需要加定位限制子盒子在父盒子内显示。</p><p>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p><h3 id="7-固定定位"><a href="#7-固定定位" class="headerlink" title="7.固定定位"></a>7.固定定位</h3><p> 元素固定于浏览器可视区的位置。</p><p> position: fixed;</p><ol><li><p>以浏览器的可视窗口为参照点移动元素</p><p>与父元素无关</p><p>不随着滚动条滚动而滚动</p></li><li><p>固定定位不占用原来的位置</p></li></ol><p>小技巧：固定在版心右侧位置</p><p>算法：</p><p>   1.left 50%</p><pre><code class="hljs">          2.  margin-left:版心宽度的一半</code></pre><h3 id="8-粘性定位"><a href="#8-粘性定位" class="headerlink" title="8.粘性定位"></a>8.粘性定位</h3><p> 可以被认为是相对定位和固定定位的混合</p><p> position:sticky; top:10px;</p><p>特点：</p><p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p><p>2.粘性定位占有原先的位置（相对定位特点）</p><p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p><h3 id="9-定位叠放次序"><a href="#9-定位叠放次序" class="headerlink" title="9.定位叠放次序"></a>9.定位叠放次序</h3><p>使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用z-index来控制盒子的前后次序</p><p>z-index:1;</p><p>数值越大，盒子越靠上</p><p>如果属性值相同，按照书写顺序，后来居上</p><p>&#x3D;&#x3D;z-index只能用于相对定位，绝对定位和固定定位的元素&#x3D;&#x3D;</p><h3 id="10-定位的拓展"><a href="#10-定位的拓展" class="headerlink" title="10.定位的拓展"></a>10.定位的拓展</h3><p>1.&#x3D;&#x3D;加了绝对定位或固定定位的盒子不能通过margin:auto水平居中&#x3D;&#x3D;</p><p>2.绝对定位和固定定位也与浮动类似。</p><ol><li>行内元素添加绝对定位和固定定位，可以直接添加高度和宽度</li><li>块级元素添加绝对或者固定定位，如果不给宽高，默认为内容的大小</li><li>脱标的盒子不会有外边距合并</li></ol><p>3.绝对定位和固定定位会完全压住下面的盒子</p><p> （浮动的元素不会压住下面标准流的文字，因为浮动最初的目的是产生文字环绕）</p><p>如果一个盒子既有left 和right ,默认执行left;既有top bottom,默认执行top</p><h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: none 隐藏对象<br><br>display：block 除了转换为块级元素之外，同时还有显示元素的意思。<br></code></pre></td></tr></table></figure><p>特点： display 隐藏元素后，<strong>不再占</strong>有原来的位置。</p><h3 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h3><p>visibility 隐藏元素后，继续占用原来的位置</p><p>visibility：visible ; 　元素可视</p><p>visibility：hidden; 　  元素隐藏</p><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>visible</td><td>默认，不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td>溢出部分显示滚动条，无论需不需要都添加</td></tr><tr><td>auto</td><td>溢出部分显示滚动条，在需要的时候添加</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS笔记5</title>
    <link href="/2023/04/20/CSS%E7%AC%94%E8%AE%B05/"/>
    <url>/2023/04/20/CSS%E7%AC%94%E8%AE%B05/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS笔记5"><a href="#CSS笔记5" class="headerlink" title="CSS笔记5"></a>CSS笔记5</h1><h2 id="PS切图"><a href="#PS切图" class="headerlink" title="PS切图"></a>PS切图</h2><h3 id="图层切图"><a href="#图层切图" class="headerlink" title="图层切图"></a>图层切图</h3><p>用移动工具选择找到图层，右击图层，快速导出PNG</p><p>有时候要导出得图片为两个图层合并得效果，所以需要将有所需图片的图层合并，选中后ctrl+e</p><h3 id="切片切图"><a href="#切片切图" class="headerlink" title="切片切图"></a>切片切图</h3><p>利用切片选中图片</p><p>导出选中的图片</p><h3 id="ps插件切图"><a href="#ps插件切图" class="headerlink" title="ps插件切图"></a>ps插件切图</h3><p>安装cutterman插件</p><hr><h2 id="css属性书写顺序"><a href="#css属性书写顺序" class="headerlink" title="css属性书写顺序"></a>css属性书写顺序</h2><p>   建议遵循以下顺序：</p><ol><li>布局定位属性：display&#x2F;position&#x2F;float&#x2F;clear&#x2F;visibility&#x2F;overflow</li><li>自身属性：width&#x2F;height&#x2F;margin&#x2F;padding&#x2F;border&#x2F;background</li><li>文本属性：color&#x2F;font&#x2F;text-decoration&#x2F;text-align&#x2F;vertical-align&#x2F;white-space&#x2F;break-word</li><li>其他属性：content&#x2F;cursor&#x2F;border-radius&#x2F;box-shadow&#x2F;text-shadow&#x2F;background:linear-gradient..</li></ol><h2 id="页面布局整体思路"><a href="#页面布局整体思路" class="headerlink" title="页面布局整体思路"></a>页面布局整体思路</h2><ol><li>必须确定页面的版心（可视区），我们测量可得知</li><li>分析页面中的行模块，以及每个行模块的列模块。页面布局第一准则</li><li>一行中的列模块经常浮动布局，先确定每个列的大小，之后确定列的位置。页面布局第二准则</li><li>制作HTML结构。遵循先有结构，后有样式的原则</li><li>先理清楚布局结构，再写代码尤为重要</li></ol><h2 id="案例制作要点"><a href="#案例制作要点" class="headerlink" title="案例制作要点"></a>案例制作要点</h2><p>实际开发中，不会直接用链接a而是用li 包含链接(li+a)的做法</p><p>浮动的盒子不会有外边距合并问题</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS笔记4</title>
    <link href="/2023/04/20/css%E7%AC%94%E8%AE%B04/"/>
    <url>/2023/04/20/css%E7%AC%94%E8%AE%B04/</url>
    
    <content type="html"><![CDATA[<h1 id="css笔记4"><a href="#css笔记4" class="headerlink" title="css笔记4"></a>css笔记4</h1><h2 id="1-圆角边框"><a href="#1-圆角边框" class="headerlink" title="1.圆角边框"></a>1.圆角边框</h2><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">border-radius</span>: length; px或者百分比 <span class="hljs-number">50%</span><br></code></pre></td></tr></table></figure><p>边框相邻两条边的内切圆的半径</p><p><img src="/image/4.1.png"></p><ul><li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li><li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li><li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius。</li></ul><hr><h2 id="2-盒子阴影"><a href="#2-盒子阴影" class="headerlink" title="2.盒子阴影"></a>2.盒子阴影</h2><p>css3中增加了盒子阴影，可以使用box-shadow属性为盒子添加阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-shadow</span>:      ;<br></code></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需，水平阴影的位置，可负，px</td></tr><tr><td>v-shadow</td><td>必需，垂直阴影的位置，可负,px</td></tr><tr><td>blur</td><td>可选，模糊距离（阴影的虚实）,px</td></tr><tr><td>spread</td><td>可选，阴影的尺寸,px</td></tr><tr><td>color</td><td>可选，阴影的颜色</td></tr><tr><td>inset</td><td>可选，将外部阴影改为内部阴影</td></tr></tbody></table><p>原先盒子没有影子，当我们鼠标经过盒子时就添加阴影效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>:cover :&#123;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="3-文字阴影"><a href="#3-文字阴影" class="headerlink" title="3.文字阴影"></a>3.文字阴影</h2><p>用text-shadow属性将阴影应用于文本。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-shadow</span>: h-shadow v-shadow blur color;<br>属性值的含义与盒子阴影相同<br></code></pre></td></tr></table></figure><h2 id="4-x3D-x3D-css浮动-x3D-x3D"><a href="#4-x3D-x3D-css浮动-x3D-x3D" class="headerlink" title="4.&#x3D;&#x3D;css浮动&#x3D;&#x3D;"></a>4.&#x3D;&#x3D;css浮动&#x3D;&#x3D;</h2><h3 id="传统网页布局的三种方式"><a href="#传统网页布局的三种方式" class="headerlink" title="传统网页布局的三种方式"></a>传统网页布局的三种方式</h3><p>&#x3D;&#x3D;普通流（标准流）&#x3D;&#x3D;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">标签按照规定好默认方式排列<br>1.块元素独占一行，从上到下<br>2.行元素按顺序从左到右，碰到边缘自动换行<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;浮动&#x3D;&#x3D;</p><p>&#x3D;&#x3D;定位&#x3D;&#x3D;</p><p>实际开发中，一个页面基本包含这三种布局方式</p><hr><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="为什么需要浮动"><a href="#为什么需要浮动" class="headerlink" title="为什么需要浮动"></a>为什么需要浮动</h4><ol><li>如何让多个div放在一行？</li><li>如何实现两个盒子左右对齐？</li></ol><p>浮动可以改变标签的默认排列方式。</p><p>&#x3D;&#x3D;网页布局第一准则：&#x3D;&#x3D;</p><p><strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong></p><hr><h4 id="什么是浮动"><a href="#什么是浮动" class="headerlink" title="什么是浮动"></a>什么是浮动</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器&#123;<br>  <span class="hljs-attribute">float</span>:属性值;<br>&#125;<br><span class="hljs-attribute">none</span> <span class="hljs-attribute">left</span> <span class="hljs-attribute">right</span><br></code></pre></td></tr></table></figure><p>float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><h4 id="x3D-x3D-浮动特性-x3D-x3D"><a href="#x3D-x3D-浮动特性-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;浮动特性&#x3D;&#x3D;"></a>&#x3D;&#x3D;浮动特性&#x3D;&#x3D;</h4><ol><li><p>浮动的元素会脱离标准流</p><ol><li>脱离标准普通流的控制（浮）移动到指定位置（动），俗称&#x3D;&#x3D;脱标&#x3D;&#x3D;</li></ol><p>​    </p><ol start="2"><li>浮动的盒子不再保留原先的位置</li></ol><p>​</p><p>给盒子设置了浮动，这个盒子会浮起来，下面标准流的盒子会占用浮动盒子原本的位置</p><p><img src="/image/4.2.png"></p><p>​</p><p>​</p></li><li><p>浮动的元素会一行内显示并且元素顶部对齐</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。<br></code></pre></td></tr></table></figure><ol start="3"><li><p>浮动的元素具有&#x3D;&#x3D;行内块元素&#x3D;&#x3D;的特性</p><p>如果行内元素有了浮动，则不需要转换块级&#x2F;行内块元素就可以直接给高度和宽度</p><p>浮动元素的大小根据内容来决定（如果没有设置宽度）</p><p>浮动的盒子中间是没有缝隙的</p></li></ol><h4 id="浮动元素经常和标准流父级搭配使用"><a href="#浮动元素经常和标准流父级搭配使用" class="headerlink" title="浮动元素经常和标准流父级搭配使用"></a>浮动元素经常和标准流父级搭配使用</h4><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p><p>​先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧。</p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="浮动布局注意点"><a href="#浮动布局注意点" class="headerlink" title="浮动布局注意点"></a>浮动布局注意点</h4><p>1、<strong>浮动和标准流的父盒子搭配</strong>。</p><p>&#x3D;&#x3D;先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置&#x3D;&#x3D;</p><p>2、<strong>一个元素浮动了，理论上其余的兄弟元素也要浮动</strong>。</p><p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p><p>&#x3D;&#x3D;浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.&#x3D;&#x3D;</p><hr><h2 id="5-清除浮动"><a href="#5-清除浮动" class="headerlink" title="5.清除浮动"></a>5.清除浮动</h2><p>在父盒子不方便给高度的情况下，如果子盒子都是浮动排列，由于子盒子不占有位置，所以父盒子的高度会变成0，就会影响下面的标准流盒子。</p><p><img src="/image/4.3.png"></p><h4 id="清除浮动的本质"><a href="#清除浮动的本质" class="headerlink" title="清除浮动的本质"></a>清除浮动的本质</h4><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p><p>注意：</p><ul><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li><li>父级有了高度，就不会影响下面的标准流了</li></ul><h4 id="清除浮动方法"><a href="#清除浮动方法" class="headerlink" title="清除浮动方法"></a>清除浮动方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器&#123;<span class="hljs-attribute">clear</span>:属性值;&#125; <br><span class="hljs-attribute">left</span> <span class="hljs-attribute">right</span> both<br>实际 <span class="hljs-attribute">clear</span>:both<br></code></pre></td></tr></table></figure><h5 id="额外标签法："><a href="#额外标签法：" class="headerlink" title="额外标签法："></a>额外标签法：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-attribute">clear</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;在最后一个浮动元素后加一个空的标签（必须是块级元素）<br><span class="hljs-selector-class">.clear</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><p>书写方便，但是结构化较差</p><h5 id="父级添加overflow"><a href="#父级添加overflow" class="headerlink" title="父级添加overflow:"></a>父级添加overflow:</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>:hidden;<br></code></pre></td></tr></table></figure><p>缺点：无法显出溢出的部分</p><h5 id="after伪元素法："><a href="#after伪元素法：" class="headerlink" title="after伪元素法："></a>after伪元素法：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>           <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>           <span class="hljs-attribute">display</span>: block;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>           <span class="hljs-attribute">clear</span>: both;<br>           <span class="hljs-attribute">visibility</span>: hidden;<br>       &#125;<br><br> <span class="hljs-selector-class">.clearfix</span> &#123;<br>        <span class="hljs-comment">/* IE6、7 专有 */</span><br>     *zoom: <span class="hljs-number">1</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>为父元素添加一个新的类名clearfix,类名可以自定义但是父元素必须有这个样式，一般为clearfix</p><h5 id="双伪元素法"><a href="#双伪元素法" class="headerlink" title="双伪元素法:"></a>双伪元素法:</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<br>     <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>         <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>         <span class="hljs-attribute">display</span>: table;<br>     &#125;<br><br>     <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>         <span class="hljs-attribute">clear</span>: both;<br>     &#125;<br><br>     <span class="hljs-selector-class">.clearfix</span> &#123;<br>         *zoom: <span class="hljs-number">1</span>;<br>     &#125;<br></code></pre></td></tr></table></figure><p>为父元素添加一个新的类名clearfix</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS笔记3</title>
    <link href="/2023/04/20/css%E7%AC%94%E8%AE%B03/"/>
    <url>/2023/04/20/css%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="css笔记3"><a href="#css笔记3" class="headerlink" title="css笔记3"></a>css笔记3</h1><h2 id="1-css三大特性"><a href="#1-css三大特性" class="headerlink" title="1.css三大特性"></a>1.css三大特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>相同选择器给设置相同的样式，此时一个样式就会&#x3D;&#x3D;覆盖&#x3D;&#x3D;另一个冲突的样式。</p><p>样式冲突遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</p><hr><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>子标签会继承父标签的某些样式，如文本颜色和字号。</p><p>&#x3D;&#x3D;text-，font-，line-&#x3D;&#x3D;这些元素开头的可以继承，以及color属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">行高的继承性（有特殊的写法）<br> <span class="hljs-selector-tag">body</span> &#123;<br>   <span class="hljs-attribute">font</span>:<span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> Microsoft YaHei；<br> &#125;<br>当前元素文字大小的<span class="hljs-number">1.5</span>倍<br>- 行高可以跟单位也可以不跟单位<br>- 如果子元素没有设置行高，则会继承父元素的行高为 <span class="hljs-number">1.5</span><br>- 此时子元素的行高是：当前子元素的文字大小 * <span class="hljs-number">1.5</span><br>- <span class="hljs-selector-tag">body</span> 行高 <span class="hljs-number">1.5</span>  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高<br><br></code></pre></td></tr></table></figure><hr><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承  或者*</td><td>0，0，0，0</td></tr><tr><td>元素选择器</td><td>0，0，0，1</td></tr><tr><td>类选择器</td><td>0，0，1，0</td></tr><tr><td>ID选择器</td><td>0，1，0，0</td></tr><tr><td>行内样式style&#x3D;””</td><td>1,0,0,0</td></tr><tr><td>!important 重要的</td><td>无穷大</td></tr></tbody></table><p>&#x3D;&#x3D;color: black!important;&#x3D;&#x3D;</p><p>注意点：</p><ol><li>权重由4位数字组成，不会进位</li><li>等级判断从左到右，如果某一位数值相同比较 下一位</li><li>继承的权重是0，如a标签浏览器默认指定了一个样式，对body指定样式，里面的a不会有变化</li></ol><p>&#x3D;&#x3D;权重叠加&#x3D;&#x3D;</p><p>复合选择器权重叠加（并集选择器除外）</p><ul><li>div ul  li   ——&gt;      0,0,0,3</li><li>.nav ul li   ——&gt;      0,0,1,2</li><li>a:hover      —–—&gt;   0,0,1,1</li><li>.nav a       ——&gt;      0,0,1,1</li></ul><p>不会进位，单个权重分别做加法即可</p><hr><h2 id="2-css盒子模型"><a href="#2-css盒子模型" class="headerlink" title="2.css盒子模型"></a>2.css盒子模型</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p><p>网页布局过程：</p><ol><li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li><li>&#x3D;&#x3D;利用 CSS 设置好盒子样式，然后摆放到相应位置&#x3D;&#x3D;。</li><li>往盒子里面装内容</li></ol><hr><h3 id="盒子模型的组成"><a href="#盒子模型的组成" class="headerlink" title="盒子模型的组成"></a>盒子模型的组成</h3><p>把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p><p><img src="/image/3.1.PNG" alt="1"></p><h4 id="border"><a href="#border" class="headerlink" title="border"></a>border</h4><p>border可以设置元素的边框。边框由三部分组成：宽度，样式，颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-width</span>:    <br>border-style:<span class="hljs-built_in">solid</span>(实线)|<span class="hljs-built_in">dashed</span>(虚线)|<span class="hljs-built_in">dotted</span>(点线)<br>border-color:<br></code></pre></td></tr></table></figure><p>复合写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid pink; (没有顺序但一般为这种写法)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">分开写法<br><span class="hljs-attribute">border-top</span>: <span class="hljs-number">10px</span> solid pink;<br><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">10px</span> dashed purple;<br><span class="hljs-attribute">border-right</span><br><span class="hljs-attribute">border-left</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;表格细线边框&#x3D;&#x3D;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-collapse</span>: collspace 相邻边框合并到一起<br></code></pre></td></tr></table></figure><p>边框会影响盒子的实际大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">边框会额外增加盒子的实际大小。因此我们有两种方案解决：<br><br>- 测量盒子大小的时候,不量边框。<br>- 如果测量的时候包含了边框,则需要 <span class="hljs-attribute">width</span>/<span class="hljs-attribute">height</span> 减去边框宽度<br><br></code></pre></td></tr></table></figure><hr><h4 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h4><p>内边距用于设置内容与边框之间的距离。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><p>复合写法</p><p><img src="/image/3.2.PNG" alt="2"></p><p>&#x3D;&#x3D;内边距会影响盒子的实际大小&#x3D;&#x3D;</p><p>&#x3D;&#x3D;在标准的盒子模型中，width和height属性规定的是内容的大小，不包括padding,border，因此整个盒子的大小会受到padding和border的影响。&#x3D;&#x3D;</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">通过<span class="hljs-built_in">box</span>-sizing这个样式我们可以改变这种宽度计算方式，它的属性值有两个：<span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span>和<span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>。默认值为<span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span>，也就是标准的盒子模型，此时的计算公式为<br><br><span class="hljs-built_in">width</span> = 内容的宽度<br><span class="hljs-built_in">height</span> = 内容的高度<br></code></pre></td></tr></table></figure><p>为了在添加padding后盒子的大小和原本一致，需要修改width和height</p><p>(如何盒子本身没有指定width&#x2F;height属性, 则此时padding不会撑开盒子大小。)</p><hr><h4 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a>Margin</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p><p>使用方法与padding类似</p><hr><p>外边距应用：</p><p>外边距可以让&#x3D;&#x3D;块级盒子&#x3D;&#x3D;水平居中的两个条件：</p><ul><li>盒子必须指定了宽度（width）。</li><li>盒子左右的外边距都设置为 auto 。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-left</span>: auto;   <span class="hljs-attribute">margin-right</span>: auto;<br><span class="hljs-attribute">margin</span>: auto;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br></code></pre></td></tr></table></figure><p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p><hr><p>外边距合并</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-number">1</span>、相邻块元素垂直外边距的合并<br>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-<span class="hljs-built_in">bottom</span>，下面的元素有上外边距 margin-<span class="hljs-built_in">top</span> ，则他们之间的垂直间距不是 margin-<span class="hljs-built_in">bottom</span> 与 margin-<span class="hljs-built_in">top</span> 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。<br><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">2.嵌套块元素垂直外边距的塌陷<br><span class="hljs-code">  这个问题用文字不太好描述，主要是父盒子的子盒子加了外边距会导致父盒子塌陷</span><br><span class="hljs-code">  解决方案：</span><br><br><span class="hljs-bullet">- </span>可以为父元素定义上边框。<br><span class="hljs-bullet">- </span>可以为父元素定义上内边距。<br><span class="hljs-bullet">- </span>可以为父元素添加 overflow:hidden。<br><br></code></pre></td></tr></table></figure><p>清楚内外边距</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>   <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;   <span class="hljs-comment">/* 清除内边距 */</span><br>   <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;    <span class="hljs-comment">/* 清除外边距 */</span><br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基本使用</title>
    <link href="/2023/04/20/Markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/20/Markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown基本使用"><a href="#Markdown基本使用" class="headerlink" title="Markdown基本使用"></a>Markdown基本使用</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>使用 # 可以表示标题，一级标题对应一个 # ，二级标题对应两个 # 号，最多至六级标题。在Typora中，# 后要紧接着一个空格才能表示标题，否则就是普通字符。</p><p>在Typora中，也可以使用快捷键Ctrl+1（2，3，4，5，6）表示相对应的标题。Ctrl+0表示段落。标题快捷键信息可在菜单栏中的段落选项下查看。</p><hr><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><ul><li>用一对星号<code>*</code>括住的文本表示斜体文本，如：<code>*</code>要变斜体的文本<code>*</code>，<em>斜体文本</em> ；</li><li>用两对星号  <code>**</code>表示加粗；</li><li>用三对星号 <code>***</code>表示斜体和加粗；</li></ul><hr><h2 id="3-线"><a href="#3-线" class="headerlink" title="3.线"></a>3.线</h2><ol><li>分割线***</li></ol><hr><ol start="2"><li>删除线<del>22</del></li><li>下划线 <u>2</u></li></ol><p>+++</p><h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h2><h3 id="4-1无序列表"><a href="#4-1无序列表" class="headerlink" title="4.1无序列表"></a>4.1无序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*+空格+列表项</span><br><span class="hljs-emphasis">+ 列表项</span><br><span class="hljs-emphasis">- 列表项</span><br></code></pre></td></tr></table></figure><ul><li>hello world</li><li>abc</li></ul><hr><h3 id="4-2有序列表"><a href="#4-2有序列表" class="headerlink" title="4.2有序列表"></a>4.2有序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">数字+.+空格+列表项<br></code></pre></td></tr></table></figure><ol><li>abc</li><li>sd</li></ol><hr><h3 id="4-3嵌套列表"><a href="#4-3嵌套列表" class="headerlink" title="4.3嵌套列表"></a>4.3嵌套列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mark">1. * 进入列表，回车换行生产第二项后按下TAB，第二项变成第一项的子列表，按回车退出当前列表<br><br></code></pre></td></tr></table></figure><ul><li><p>一级</p><ul><li>二级<ul><li>三级</li></ul></li></ul><p>​</p></li></ul><hr><h2 id="5-区块"><a href="#5-区块" class="headerlink" title="5.区块"></a>5.区块</h2><p>当我们想要引用别人的文章内容时，可以将其放在区块内。</p><p>可以使用<code>&gt;</code>加空格来表示区块</p><blockquote><p>区块</p><blockquote><p>二级区块</p><blockquote><p>三级区块</p></blockquote></blockquote></blockquote><p>退出按<code>enter</code></p><h2 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">行内代码<br><span class="hljs-code">`代码`</span><br>代码段<br>​<span class="hljs-code">```+编程语言</span><br></code></pre></td></tr></table></figure><p><code>hello</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world!\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2><p><a href="https://www.baidu.com/">百度</a><br><a href="https://www.baidu.com/">https://www.baidu.com/</a></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[链接文字]</span>(地址)<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><p>相对路径和绝对路径。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">也可以页内跳转<br><span class="hljs-selector-attr">[链接文字]</span>(#标题文字)<br></code></pre></td></tr></table></figure><p><a href="#Markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">回到顶部</a></p><p>​          </p><hr><h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><table><thead><tr><th align="left">姓名</th><th align="left">学号</th><th align="left">成绩</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">表头</span>|<span class="hljs-string">表头</span>|<span class="hljs-string">表头</span>|<br>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">----</span>|<br>|<span class="hljs-string">单元格</span>|<span class="hljs-string">单元格</span>|<span class="hljs-string">单元格</span>|<br>|<span class="hljs-string">单元格</span>|<span class="hljs-string">单元格</span>|<span class="hljs-string">单元格</span>|<br></code></pre></td></tr></table></figure><hr><h2 id="9-图片"><a href="#9-图片" class="headerlink" title="9.图片"></a>9.图片</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址)<br><br>!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址 &quot;可选标题&quot;)<br><br></code></pre></td></tr></table></figure><p><img src="/2023/04/20/Markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/photo/DSC_0541.JPG" alt="图片"></p><hr><h2 id="10-emoji"><a href="#10-emoji" class="headerlink" title="10.emoji"></a>10.emoji</h2><p><code>:emoji:</code></p><p>:grinning:</p><p>:crab:</p><p>:cry:</p><p>:laughing:</p><h2 id="11-上下标和高亮"><a href="#11-上下标和高亮" class="headerlink" title="11.上下标和高亮"></a>11.上下标和高亮</h2><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tp">在Typora中，可以用一对~将下标括起来，如：H~<span class="hljs-number">2</span>~O表示H2O<br><br>同样，我们也可以用一对^将上标括起来，如：<span class="hljs-keyword">X</span>^<span class="hljs-number">2</span>^表示<span class="hljs-keyword">X</span><span class="hljs-number">2</span><br><br>高亮：==内容==<br></code></pre></td></tr></table></figure><p>h<del>2</del>o</p><p>&#x3D;&#x3D;x^2^&#x3D;&#x3D;</p><hr><p><a href="#markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">回到顶部</a></p><p>未完待续…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/20/hello-world/"/>
    <url>/2023/04/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
